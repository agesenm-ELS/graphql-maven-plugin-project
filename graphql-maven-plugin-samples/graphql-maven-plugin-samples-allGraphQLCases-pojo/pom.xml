<?xml version="1.0"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>com.graphql-java-generator</groupId>
		<artifactId>graphql-maven-plugin-samples</artifactId>
		<version>local-SNAPSHOT</version>
	</parent>

	<artifactId>graphql-maven-plugin-samples-allGraphQLCases-pojo</artifactId>
	<description>This module do integration tests for the generatePojo goal</description>

	<build>
		<plugins>
			<plugin>
				<groupId>com.graphql-java-generator</groupId>
				<artifactId>graphql-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>generatePojo-client</id>
						<goals>
							<goal>generatePojo</goal>
						</goals>
						<configuration>
							<!-- Choosing client or server is useless. It's here only to check that if used, everything is still Ok -->
							<mode>client</mode>
							<packageName>org.allGraphQLCases.client.pojo</packageName>
							<skipGenerationIfSchemaHasNotChanged>true</skipGenerationIfSchemaHasNotChanged>
							<targetSourceFolder>${project.build.directory}/generated-sources/pojo-client</targetSourceFolder>
							<targetResourceFolder>${project.build.directory}/generated-resources/pojo-client</targetResourceFolder>
							<customScalars>
								<customScalar>
									<graphQLTypeName>Date</graphQLTypeName>
									<javaType>java.util.Date</javaType>
									<graphQLScalarTypeStaticField>com.graphql_java_generator.customscalars.GraphQLScalarTypeDate.Date
									</graphQLScalarTypeStaticField>
								</customScalar>
								<customScalar>
									<graphQLTypeName>else</graphQLTypeName>
									<javaType>java.lang.String</javaType>
									<graphQLScalarTypeGetter>org.allGraphQLCases.GraphQLScalarTypeElse.getElseScalar()</graphQLScalarTypeGetter>
								</customScalar>
								<customScalar>
									<graphQLTypeName>Long</graphQLTypeName>
									<javaType>java.lang.Long</javaType>
									<graphQLScalarTypeStaticField>graphql.Scalars.GraphQLLong</graphQLScalarTypeStaticField>
								</customScalar>
								<customScalar>
									<graphQLTypeName>NonNegativeInt</graphQLTypeName>
									<javaType>java.lang.Integer</javaType>
									<graphQLScalarTypeStaticField>graphql.scalars.ExtendedScalars.NonNegativeInt</graphQLScalarTypeStaticField>
								</customScalar>
							</customScalars>
						</configuration>
					</execution>
					<execution>
						<id>generatePojo-server</id>
						<goals>
							<goal>generatePojo</goal>
						</goals>
						<configuration>
							<!-- Choosing client or server is useless. It's here only to check that if used, everything is still Ok -->
							<mode>server</mode>
							<copyRuntimeSources>false</copyRuntimeSources>
							<packageName>org.allGraphQLCases.server.pojo</packageName>
							<skipGenerationIfSchemaHasNotChanged>true</skipGenerationIfSchemaHasNotChanged>
							<targetSourceFolder>${project.build.directory}/generated-sources/pojo-server</targetSourceFolder>
							<targetResourceFolder>${project.build.directory}/generated-resources/pojo-server</targetResourceFolder>
							<customScalars>
								<customScalar>
									<graphQLTypeName>Date</graphQLTypeName>
									<javaType>java.util.Date</javaType>
									<graphQLScalarTypeStaticField>com.graphql_java_generator.customscalars.GraphQLScalarTypeDate.Date
									</graphQLScalarTypeStaticField>
								</customScalar>
								<customScalar>
									<graphQLTypeName>else</graphQLTypeName>
									<javaType>java.lang.String</javaType>
									<graphQLScalarTypeGetter>org.allGraphQLCases.GraphQLScalarTypeElse.getElseScalar()</graphQLScalarTypeGetter>
								</customScalar>
								<customScalar>
									<graphQLTypeName>Long</graphQLTypeName>
									<javaType>java.lang.Long</javaType>
									<graphQLScalarTypeStaticField>graphql.Scalars.GraphQLLong</graphQLScalarTypeStaticField>
								</customScalar>
								<customScalar>
									<graphQLTypeName>NonNegativeInt</graphQLTypeName>
									<javaType>java.lang.Integer</javaType>
									<graphQLScalarTypeStaticField>graphql.scalars.ExtendedScalars.NonNegativeInt</graphQLScalarTypeStaticField>
								</customScalar>
							</customScalars>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<!-- This helps by adding the generated source in the build path of your IDE -->
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>add-source</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>add-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>${project.build.directory}/generated-sources/pojo-client</source>
								<source>${project.build.directory}/generated-sources/pojo-server</source>
							</sources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<!-- We don't want to spam the repository with test/sample artefacts -->
				<artifactId>maven-deploy-plugin</artifactId>
				<configuration>
					<skip>true</skip>
				</configuration>
			</plugin>
		</plugins>

	</build>

	<dependencies>
		<!-- Dependencies for tests -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- Runtime for the generated code -->
		<dependency>
			<groupId>com.graphql-java-generator</groupId>
			<artifactId>graphql-java-client-dependencies</artifactId>
			<type>pom</type>
		</dependency>

		<!-- Complementary graphql dependencies, for the custom scalars -->
		<dependency>
			<groupId>com.graphql-java</groupId>
			<artifactId>graphql-java-extended-scalars</artifactId>
		</dependency>

	</dependencies>

	<reporting>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<reportSets>
					<reportSet>
						<id>non-aggregate</id>
						<reports>
							<report>javadoc</report>
						</reports>
					</reportSet>
				</reportSets>
				<configuration>
					<source>8</source>
				</configuration>
			</plugin>
		</plugins>
	</reporting>

</project>
