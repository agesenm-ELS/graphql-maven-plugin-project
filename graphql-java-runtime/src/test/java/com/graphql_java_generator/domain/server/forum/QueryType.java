/** Generated by the default template from graphql-java-generator */
package com.graphql_java_generator.domain.server.forum;

import java.util.HashMap;
import java.util.Map;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.graphql_java_generator.exception.GraphQLRequestExecutionException;

import com.graphql_java_generator.GraphQLField;
import com.graphql_java_generator.annotation.GraphQLInputParameters;
import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLScalar;
import java.util.List;
import javax.persistence.Transient;

/**
 *
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLObjectType("QueryType")
public class QueryType 
{

	public QueryType(){
		// No action
	}

	@Transient
	@GraphQLNonScalar(fieldName = "boards", graphQLTypeSimpleName = "Board", javaClass = Board.class)
	List<Board> boards;


	@GraphQLScalar(fieldName = "nbBoards", graphQLTypeSimpleName = "Int", javaClass = Integer.class)
	Integer nbBoards;


	@Transient
	@GraphQLNonScalar(fieldName = "topics", graphQLTypeSimpleName = "Topic", javaClass = Topic.class)
	List<Topic> topics;


	@Transient
	@GraphQLNonScalar(fieldName = "findTopics", graphQLTypeSimpleName = "Topic", javaClass = Topic.class)
	List<Topic> findTopics;



	public void setBoards(List<Board> boards) {
		this.boards = boards;
	}

	public List<Board> getBoards() {
		return boards;
	}

	public void setNbBoards(Integer nbBoards) {
		this.nbBoards = nbBoards;
	}

	public Integer getNbBoards() {
		return nbBoards;
	}

	public void setTopics(List<Topic> topics) {
		this.topics = topics;
	}

	public List<Topic> getTopics() {
		return topics;
	}

	public void setFindTopics(List<Topic> findTopics) {
		this.findTopics = findTopics;
	}

	public List<Topic> getFindTopics() {
		return findTopics;
	}

    public String toString() {
        return "QueryType {"
				+ "boards: " + boards
				+ ", "
				+ "nbBoards: " + nbBoards
				+ ", "
				+ "topics: " + topics
				+ ", "
				+ "findTopics: " + findTopics
        		+ "}";
    }

    /**
	 * Enum of field names
	 */
	 public static enum Field implements GraphQLField {
		Boards("boards"),
		NbBoards("nbBoards"),
		Topics("topics"),
		FindTopics("findTopics");

		private String fieldName;

		Field(String fieldName) {
			this.fieldName = fieldName;
		}

		public String getFieldName() {
			return fieldName;
		}

		public Class<?> getGraphQLType() {
			return this.getClass().getDeclaringClass();
		}

	}

	public static Builder builder() {
			return new Builder();
		}



	/**
	 * Builder
	 */
	public static class Builder {
		private List<Board> boards;
		private Integer nbBoards;
		private List<Topic> topics;
		private List<Topic> findTopics;


		public Builder withBoards(List<Board> boards) {
			this.boards = boards;
			return this;
		}
		public Builder withNbBoards(Integer nbBoards) {
			this.nbBoards = nbBoards;
			return this;
		}
		public Builder withTopics(List<Topic> topics) {
			this.topics = topics;
			return this;
		}
		public Builder withFindTopics(List<Topic> findTopics) {
			this.findTopics = findTopics;
			return this;
		}

		public QueryType build() {
			QueryType _object = new QueryType();
			_object.setBoards(boards);
			_object.setNbBoards(nbBoards);
			_object.setTopics(topics);
			_object.setFindTopics(findTopics);
			return _object;
		}
	}
}
