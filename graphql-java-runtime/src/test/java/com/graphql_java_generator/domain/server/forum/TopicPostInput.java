/** Generated by the default template from graphql-java-generator */
package com.graphql_java_generator.domain.server.forum;

import java.util.HashMap;
import java.util.Map;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.graphql_java_generator.exception.GraphQLRequestExecutionException;

import com.graphql_java_generator.GraphQLField;
import com.graphql_java_generator.annotation.GraphQLInputParameters;
import com.graphql_java_generator.annotation.GraphQLInputType;
import com.graphql_java_generator.annotation.GraphQLScalar;
import java.util.Date;

/**
 *
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLInputType("TopicPostInput")
public class TopicPostInput 
{

	public TopicPostInput(){
		// No action
	}

	@GraphQLScalar(fieldName = "authorId", graphQLTypeSimpleName = "ID", javaClass = String.class)
	String authorId;


	@GraphQLScalar(fieldName = "date", graphQLTypeSimpleName = "Date", javaClass = Date.class)
	Date date;


	@GraphQLScalar(fieldName = "publiclyAvailable", graphQLTypeSimpleName = "Boolean", javaClass = Boolean.class)
	Boolean publiclyAvailable;


	@GraphQLScalar(fieldName = "title", graphQLTypeSimpleName = "String", javaClass = String.class)
	String title;


	@GraphQLScalar(fieldName = "content", graphQLTypeSimpleName = "String", javaClass = String.class)
	String content;



	public void setAuthorId(String authorId) {
		this.authorId = authorId;
	}

	public String getAuthorId() {
		return authorId;
	}

	public void setDate(Date date) {
		this.date = date;
	}

	public Date getDate() {
		return date;
	}

	public void setPubliclyAvailable(Boolean publiclyAvailable) {
		this.publiclyAvailable = publiclyAvailable;
	}

	public Boolean getPubliclyAvailable() {
		return publiclyAvailable;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	public String getTitle() {
		return title;
	}

	public void setContent(String content) {
		this.content = content;
	}

	public String getContent() {
		return content;
	}

    public String toString() {
        return "TopicPostInput {"
				+ "authorId: " + authorId
				+ ", "
				+ "date: " + date
				+ ", "
				+ "publiclyAvailable: " + publiclyAvailable
				+ ", "
				+ "title: " + title
				+ ", "
				+ "content: " + content
        		+ "}";
    }

    /**
	 * Enum of field names
	 */
	 public static enum Field implements GraphQLField {
		AuthorId("authorId"),
		Date("date"),
		PubliclyAvailable("publiclyAvailable"),
		Title("title"),
		Content("content");

		private String fieldName;

		Field(String fieldName) {
			this.fieldName = fieldName;
		}

		public String getFieldName() {
			return fieldName;
		}

		public Class<?> getGraphQLType() {
			return this.getClass().getDeclaringClass();
		}

	}

	public static Builder builder() {
			return new Builder();
		}



	/**
	 * Builder
	 */
	public static class Builder {
		private String authorId;
		private Date date;
		private Boolean publiclyAvailable;
		private String title;
		private String content;


		public Builder withAuthorId(String authorId) {
			this.authorId = authorId;
			return this;
		}
		public Builder withDate(Date date) {
			this.date = date;
			return this;
		}
		public Builder withPubliclyAvailable(Boolean publiclyAvailable) {
			this.publiclyAvailable = publiclyAvailable;
			return this;
		}
		public Builder withTitle(String title) {
			this.title = title;
			return this;
		}
		public Builder withContent(String content) {
			this.content = content;
			return this;
		}

		public TopicPostInput build() {
			TopicPostInput _object = new TopicPostInput();
			_object.setAuthorId(authorId);
			_object.setDate(date);
			_object.setPubliclyAvailable(publiclyAvailable);
			_object.setTitle(title);
			_object.setContent(content);
			return _object;
		}
	}
}
