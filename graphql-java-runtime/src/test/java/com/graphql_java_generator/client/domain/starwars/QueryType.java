/** Generated by the default template from graphql-java-generator */
package com.graphql_java_generator.client.domain.starwars;

import java.util.HashMap;
import java.util.Map;
import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.SSLContext;
import javax.ws.rs.client.Client;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLScalar;
import com.graphql_java_generator.exception.GraphQLRequestExecutionException;
import com.graphql_java_generator.exception.GraphQLRequestPreparationException;
import com.graphql_java_generator.client.GraphQLObjectMapper;
import com.graphql_java_generator.client.request.InputParameter;
import com.graphql_java_generator.client.request.ObjectResponse;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.graphql_java_generator.GraphQLField;
import com.graphql_java_generator.annotation.GraphQLInputParameters;
import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLQuery;
import com.graphql_java_generator.annotation.GraphQLScalar;
import com.graphql_java_generator.annotation.RequestType;
import java.util.List;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.graphql_java_generator.GraphQLField;
import com.graphql_java_generator.annotation.GraphQLInputParameters;
import com.graphql_java_generator.annotation.RequestType;
import java.util.List;

import com.graphql_java_generator.client.GraphQLConfiguration;
import com.graphql_java_generator.client.GraphqlClientUtils;

/**
 * This class contains the response for a full request. See the 
 * <A HREF="https://graphql-maven-plugin-project.graphql-java-generator.com/exec_graphql_requests.html">plugin web site</A> 
 * for more information on full and partial requests.<BR/>
 * It also allows access to the _extensions_ part of the response. Take a look at the 
 * <A HRE="https://spec.graphql.org/June2018/#sec-Response">GraphQL spec</A> for more information on this.
 * 
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLQuery(name = "QueryType", type = RequestType.query)
@GraphQLObjectType("QueryType")
public class QueryType extends QueryTypeExecutor implements com.graphql_java_generator.client.GraphQLRequestObject {

	private GraphQLObjectMapper extensionMapper = null;
	private JsonNode extensions;
	private Map<String, JsonNode> extensionsAsMap = null;


	/**
	 * This map contains the deserialiazed values for the alias, as parsed from the json response from the GraphQL
	 * server. The key is the alias name, the value is the deserialiazed value (taking into account custom scalars,
	 * lists, ...)
	 */
	@com.graphql_java_generator.annotation.GraphQLIgnore
	Map<String, Object> aliasValues = new HashMap<>();

	public QueryType(){
		// No action
	}

	/**
	 * hero is the main character of the episode
	 */
	@JsonProperty("hero")
	@GraphQLInputParameters(names = {"episode"}, types = {"Episode"}, mandatories = {false}, listDepths = {0}, itemsMandatory = {false})
	@GraphQLNonScalar(fieldName = "hero", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	Character hero;


	@JsonProperty("characters")
	@JsonDeserialize(using = CustomJacksonDeserializers.ListCharacter.class)
	@GraphQLInputParameters(names = {"episode"}, types = {"Episode"}, mandatories = {false}, listDepths = {0}, itemsMandatory = {false})
	@GraphQLNonScalar(fieldName = "characters", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	List<Character> characters;


	@JsonProperty("human")
	@GraphQLInputParameters(names = {"id"}, types = {"ID"}, mandatories = {false}, listDepths = {0}, itemsMandatory = {false})
	@GraphQLNonScalar(fieldName = "human", graphQLTypeSimpleName = "Human", javaClass = Human.class)
	Human human;


	@JsonProperty("droid")
	@GraphQLInputParameters(names = {"id"}, types = {"ID"}, mandatories = {true}, listDepths = {0}, itemsMandatory = {false})
	@GraphQLNonScalar(fieldName = "droid", graphQLTypeSimpleName = "Droid", javaClass = Droid.class)
	Droid droid;


	@JsonProperty("__schema")
	@GraphQLNonScalar(fieldName = "__schema", graphQLTypeSimpleName = "__Schema", javaClass = __Schema.class)
	__Schema __schema;


	@JsonProperty("__type")
	@GraphQLInputParameters(names = {"name"}, types = {"String"}, mandatories = {true}, listDepths = {0}, itemsMandatory = {false})
	@GraphQLNonScalar(fieldName = "__type", graphQLTypeSimpleName = "__Type", javaClass = __Type.class)
	__Type __type;


	@JsonProperty("__typename")
	@GraphQLScalar(fieldName = "__typename", graphQLTypeSimpleName = "String", javaClass = String.class)
	String __typename;



	/**
	 * hero is the main character of the episode
	 */
	public void setHero(Character hero) {
		this.hero = hero;
	}

	/**
	 * hero is the main character of the episode
	 */
	public Character getHero() {
		return hero;
	}

	public void setCharacters(List<Character> characters) {
		this.characters = characters;
	}

	public List<Character> getCharacters() {
		return characters;
	}

	public void setHuman(Human human) {
		this.human = human;
	}

	public Human getHuman() {
		return human;
	}

	public void setDroid(Droid droid) {
		this.droid = droid;
	}

	public Droid getDroid() {
		return droid;
	}

	public void set__schema(__Schema __schema) {
		this.__schema = __schema;
	}

	public __Schema get__schema() {
		return __schema;
	}

	public void set__type(__Type __type) {
		this.__type = __type;
	}

	public __Type get__type() {
		return __type;
	}

	public void set__typename(String __typename) {
		this.__typename = __typename;
	}

	public String get__typename() {
		return __typename;
	}


	/**
	 * This method is called during the json deserialization process, by the {@link GraphQLObjectMapper}, each time an
	 * alias value is read from the json.
	 * 
	 * @param aliasName
	 * @param aliasDeserializedValue
	 */
	public void setAliasValue(String aliasName, Object aliasDeserializedValue) {
		aliasValues.put(aliasName, aliasDeserializedValue);
	}

	/**
	 * Retrieves the value for the given alias, as it has been received for this object in the GraphQL response. <BR/>
	 * This method <B>should not be used for Custom Scalars</B>, as the parser doesn't know if this alias is a custom
	 * scalar, and which custom scalar to use at deserialization time. In most case, a value will then be provided by
	 * this method with a basis json deserialization, but this value won't be the proper custom scalar value.
	 * 
	 * @param alias
	 * @return
	 * @throws GraphQLRequestExecutionException
	 *             If the value can not be parsed
	 */
	public Object getAliasValue(String alias) throws GraphQLRequestExecutionException {
		Object value = aliasValues.get(alias);
		if (value instanceof GraphQLRequestExecutionException)
			throw (GraphQLRequestExecutionException) value;
		else
			return value;
	}

    public String toString() {
        return "QueryType {"
				+ "hero: " + hero
				+ ", "
				+ "characters: " + characters
				+ ", "
				+ "human: " + human
				+ ", "
				+ "droid: " + droid
				+ ", "
				+ "__schema: " + __schema
				+ ", "
				+ "__type: " + __type
				+ ", "
				+ "__typename: " + __typename
        		+ "}";
    }

    /**
	 * Enum of field names
	 */
	 public static enum Field implements GraphQLField {
		Hero("hero"),
		Characters("characters"),
		Human("human"),
		Droid("droid"),
		__schema("__schema"),
		__type("__type"),
		__typename("__typename");

		private String fieldName;

		Field(String fieldName) {
			this.fieldName = fieldName;
		}

		public String getFieldName() {
			return fieldName;
		}

		public Class<?> getGraphQLType() {
			return this.getClass().getDeclaringClass();
		}

	}

	public static Builder builder() {
			return new Builder();
		}



	/**
	 * Builder
	 */
	public static class Builder {
		private Character hero;
		private List<Character> characters;
		private Human human;
		private Droid droid;
		private __Schema __schema;
		private __Type __type;


		public Builder withHero(Character hero) {
			this.hero = hero;
			return this;
		}
		public Builder withCharacters(List<Character> characters) {
			this.characters = characters;
			return this;
		}
		public Builder withHuman(Human human) {
			this.human = human;
			return this;
		}
		public Builder withDroid(Droid droid) {
			this.droid = droid;
			return this;
		}
		public Builder with__schema(__Schema __schema) {
			this.__schema = __schema;
			return this;
		}
		public Builder with__type(__Type __type) {
			this.__type = __type;
			return this;
		}

		public QueryType build() {
			QueryType _object = new QueryType();
			_object.setHero(hero);
			_object.setCharacters(characters);
			_object.setHuman(human);
			_object.setDroid(droid);
			_object.set__schema(__schema);
			_object.set__type(__type);
			_object.set__typename("QueryType");
			return _object;
		}
	}

	/** {@inheritDoc} */
	public QueryType(String graphqlEndpoint) {
		super(graphqlEndpoint);
	}

	/** {@inheritDoc} */
	public QueryType(String graphqlEndpoint, SSLContext sslContext, HostnameVerifier hostnameVerifier) {
		super(graphqlEndpoint, sslContext, hostnameVerifier);
	}

	/** {@inheritDoc} */
	public QueryType(String graphqlEndpoint, Client client) {
		super(graphqlEndpoint, client);
	}

	private GraphQLObjectMapper getExtensionMapper() {
		if (extensionMapper == null) {
			extensionMapper = new GraphQLObjectMapper("org.graphql.mavenplugin.junittest.starwars_client_springconfiguration", null);
		}
		return extensionMapper;
	}
	
	public JsonNode getExtensions() {
		return extensions;
	}
	
	public void setExtensions(JsonNode extensions) {
		this.extensions = extensions;
	}
	
	/**
	 * Returns the extensions as a map. The values can't be deserialized, as their type is unknown.
	 * 
	 * @return
	 */
	public Map<String, JsonNode> getExtensionsAsMap() {
		if (extensionsAsMap == null) {
			extensionsAsMap = getExtensionMapper().convertValue(extensions, new TypeReference<Map<String, JsonNode>>() {
			});
		}
		return extensionsAsMap;
	}
	
	/**
	 * Parse the value for the given _key_, as found in the <I>extensions</I> field of the GraphQL server's response,
	 * into the given _t_ class.
	 * 
	 * @param <T>
	 * @param key
	 * @param t
	 * @return null if the key is not in the <I>extensions</I> map. Otherwise: the value for this _key_, as a _t_
	 *         instance
	 * @throws JsonProcessingException
	 *             When there is an error when converting the key's value into the _t_ class
	 */
	public <T> T getExtensionsField(String key, Class<T> t) throws JsonProcessingException {
		JsonNode node = getExtensionsAsMap().get(key);
		return (node == null) ? null : getExtensionMapper().treeToValue(node, t);
	}

	/**
	 * This method is deprecated: please use {@link QueryTypeExecutor} class instead of this class, to execute this method. 
	 * It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0 version.
	 */
	@Deprecated
	public QueryTypeResponse execWithBindValues(String queryResponseDef, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.exec(queryResponseDef, parameters);
	}

	/**
	 * This method is deprecated: please use {@link QueryTypeExecutor} class instead of this class, to execute this method. 
	 * It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0 version.
	 */
	@Deprecated
	public QueryTypeResponse exec(String queryResponseDef, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.exec(queryResponseDef, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link QueryTypeExecutor} class instead of this class, to execute this method. 
	 * It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0 version.
	 */
	@Deprecated
	public QueryTypeResponse execWithBindValues(ObjectResponse objectResponse, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException {
		return super.execWithBindValues(objectResponse, parameters);
	}

	/**
	 * This method is deprecated: please use {@link QueryTypeExecutor} class instead of this class, to execute this method. 
	 * It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0 version.
	 */
	@Deprecated
	public QueryTypeResponse exec(ObjectResponse objectResponse, Object... paramsAndValues)
			throws GraphQLRequestExecutionException {
		return super.exec(objectResponse, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link QueryTypeExecutor} class instead of this class, to execute this method. 
	 * It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0 version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getResponseBuilder() throws GraphQLRequestPreparationException {
		return super.getResponseBuilder();
	}

	/**
	 * This method is deprecated: please use {@link QueryTypeExecutor} class instead of this class, to execute this method. 
	 * It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0 version.
	 */
	@Deprecated
	public GraphQLRequest getGraphQLRequest(String fullRequest) throws GraphQLRequestPreparationException {
		return super.getGraphQLRequest(fullRequest);
	}

	/**
	 * This method is deprecated: please use {@link QueryTypeExecutor} class instead of this class, to execute this method. 
	 * It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0 version.
	 */
	@Deprecated
	@GraphQLNonScalar (fieldName = "hero", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	public Character heroWithBindValues(String queryResponseDef, Episode episode, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.heroWithBindValues(queryResponseDef, episode, parameters);
	}

	/**
	 * This method is deprecated: please use {@link QueryTypeExecutor} class instead of this class, to execute this method. 
	 * It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0 version.
	 */
	@Deprecated
	@GraphQLNonScalar (fieldName = "hero", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	public Character hero(String queryResponseDef, Episode episode, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.hero(queryResponseDef, episode, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link QueryTypeExecutor} class instead of this class, to execute this method. 
	 * It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0 version.
	 */
	@Deprecated
	@GraphQLNonScalar (fieldName = "hero", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	public Character heroWithBindValues(ObjectResponse objectResponse, Episode episode, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException  {
		return super.heroWithBindValues(objectResponse, episode, parameters);
	}

	/**
	 * This method is deprecated: please use {@link QueryTypeExecutor} class instead of this class, to execute this method. 
	 * It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0 version.
	 */
	@Deprecated
	@GraphQLNonScalar (fieldName = "hero", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	public Character hero(ObjectResponse objectResponse, Episode episode, Object... paramsAndValues)
			throws GraphQLRequestExecutionException  {
		return super.hero(objectResponse, episode, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link QueryTypeExecutor} class instead of this class, to execute this method. 
	 * It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0 version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getHeroResponseBuilder() throws GraphQLRequestPreparationException {
		return super.getHeroResponseBuilder();
	}


	/**
	 * This method is deprecated: please use {@link QueryTypeExecutor} class instead of this class, to execute this method. 
	 * It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0 version.
	 */
	@Deprecated
	public GraphQLRequest getHeroGraphQLRequest(String partialRequest) throws GraphQLRequestPreparationException {
		return super.getHeroGraphQLRequest(partialRequest);
	}
	
	/**
	 * This method is deprecated: please use {@link QueryTypeExecutor} class instead of this class, to execute this method. 
	 * It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0 version.
	 */
	@Deprecated
	@GraphQLNonScalar (fieldName = "characters", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	public List<Character> charactersWithBindValues(String queryResponseDef, Episode episode, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.charactersWithBindValues(queryResponseDef, episode, parameters);
	}

	/**
	 * This method is deprecated: please use {@link QueryTypeExecutor} class instead of this class, to execute this method. 
	 * It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0 version.
	 */
	@Deprecated
	@GraphQLNonScalar (fieldName = "characters", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	public List<Character> characters(String queryResponseDef, Episode episode, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.characters(queryResponseDef, episode, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link QueryTypeExecutor} class instead of this class, to execute this method. 
	 * It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0 version.
	 */
	@Deprecated
	@GraphQLNonScalar (fieldName = "characters", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	public List<Character> charactersWithBindValues(ObjectResponse objectResponse, Episode episode, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException  {
		return super.charactersWithBindValues(objectResponse, episode, parameters);
	}

	/**
	 * This method is deprecated: please use {@link QueryTypeExecutor} class instead of this class, to execute this method. 
	 * It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0 version.
	 */
	@Deprecated
	@GraphQLNonScalar (fieldName = "characters", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	public List<Character> characters(ObjectResponse objectResponse, Episode episode, Object... paramsAndValues)
			throws GraphQLRequestExecutionException  {
		return super.characters(objectResponse, episode, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link QueryTypeExecutor} class instead of this class, to execute this method. 
	 * It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0 version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getCharactersResponseBuilder() throws GraphQLRequestPreparationException {
		return super.getCharactersResponseBuilder();
	}


	/**
	 * This method is deprecated: please use {@link QueryTypeExecutor} class instead of this class, to execute this method. 
	 * It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0 version.
	 */
	@Deprecated
	public GraphQLRequest getCharactersGraphQLRequest(String partialRequest) throws GraphQLRequestPreparationException {
		return super.getCharactersGraphQLRequest(partialRequest);
	}
	
	/**
	 * This method is deprecated: please use {@link QueryTypeExecutor} class instead of this class, to execute this method. 
	 * It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0 version.
	 */
	@Deprecated
	@GraphQLNonScalar (fieldName = "human", graphQLTypeSimpleName = "Human", javaClass = Human.class)
	public Human humanWithBindValues(String queryResponseDef, String id, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.humanWithBindValues(queryResponseDef, id, parameters);
	}

	/**
	 * This method is deprecated: please use {@link QueryTypeExecutor} class instead of this class, to execute this method. 
	 * It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0 version.
	 */
	@Deprecated
	@GraphQLNonScalar (fieldName = "human", graphQLTypeSimpleName = "Human", javaClass = Human.class)
	public Human human(String queryResponseDef, String id, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.human(queryResponseDef, id, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link QueryTypeExecutor} class instead of this class, to execute this method. 
	 * It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0 version.
	 */
	@Deprecated
	@GraphQLNonScalar (fieldName = "human", graphQLTypeSimpleName = "Human", javaClass = Human.class)
	public Human humanWithBindValues(ObjectResponse objectResponse, String id, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException  {
		return super.humanWithBindValues(objectResponse, id, parameters);
	}

	/**
	 * This method is deprecated: please use {@link QueryTypeExecutor} class instead of this class, to execute this method. 
	 * It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0 version.
	 */
	@Deprecated
	@GraphQLNonScalar (fieldName = "human", graphQLTypeSimpleName = "Human", javaClass = Human.class)
	public Human human(ObjectResponse objectResponse, String id, Object... paramsAndValues)
			throws GraphQLRequestExecutionException  {
		return super.human(objectResponse, id, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link QueryTypeExecutor} class instead of this class, to execute this method. 
	 * It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0 version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getHumanResponseBuilder() throws GraphQLRequestPreparationException {
		return super.getHumanResponseBuilder();
	}


	/**
	 * This method is deprecated: please use {@link QueryTypeExecutor} class instead of this class, to execute this method. 
	 * It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0 version.
	 */
	@Deprecated
	public GraphQLRequest getHumanGraphQLRequest(String partialRequest) throws GraphQLRequestPreparationException {
		return super.getHumanGraphQLRequest(partialRequest);
	}
	
	/**
	 * This method is deprecated: please use {@link QueryTypeExecutor} class instead of this class, to execute this method. 
	 * It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0 version.
	 */
	@Deprecated
	@GraphQLNonScalar (fieldName = "droid", graphQLTypeSimpleName = "Droid", javaClass = Droid.class)
	public Droid droidWithBindValues(String queryResponseDef, String id, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.droidWithBindValues(queryResponseDef, id, parameters);
	}

	/**
	 * This method is deprecated: please use {@link QueryTypeExecutor} class instead of this class, to execute this method. 
	 * It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0 version.
	 */
	@Deprecated
	@GraphQLNonScalar (fieldName = "droid", graphQLTypeSimpleName = "Droid", javaClass = Droid.class)
	public Droid droid(String queryResponseDef, String id, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.droid(queryResponseDef, id, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link QueryTypeExecutor} class instead of this class, to execute this method. 
	 * It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0 version.
	 */
	@Deprecated
	@GraphQLNonScalar (fieldName = "droid", graphQLTypeSimpleName = "Droid", javaClass = Droid.class)
	public Droid droidWithBindValues(ObjectResponse objectResponse, String id, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException  {
		return super.droidWithBindValues(objectResponse, id, parameters);
	}

	/**
	 * This method is deprecated: please use {@link QueryTypeExecutor} class instead of this class, to execute this method. 
	 * It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0 version.
	 */
	@Deprecated
	@GraphQLNonScalar (fieldName = "droid", graphQLTypeSimpleName = "Droid", javaClass = Droid.class)
	public Droid droid(ObjectResponse objectResponse, String id, Object... paramsAndValues)
			throws GraphQLRequestExecutionException  {
		return super.droid(objectResponse, id, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link QueryTypeExecutor} class instead of this class, to execute this method. 
	 * It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0 version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder getDroidResponseBuilder() throws GraphQLRequestPreparationException {
		return super.getDroidResponseBuilder();
	}


	/**
	 * This method is deprecated: please use {@link QueryTypeExecutor} class instead of this class, to execute this method. 
	 * It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0 version.
	 */
	@Deprecated
	public GraphQLRequest getDroidGraphQLRequest(String partialRequest) throws GraphQLRequestPreparationException {
		return super.getDroidGraphQLRequest(partialRequest);
	}
	
	/**
	 * This method is deprecated: please use {@link QueryTypeExecutor} class instead of this class, to execute this method. 
	 * It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0 version.
	 */
	@Deprecated
	@GraphQLNonScalar (fieldName = "__schema", graphQLTypeSimpleName = "__Schema", javaClass = __Schema.class)
	public __Schema __schemaWithBindValues(String queryResponseDef, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.__schemaWithBindValues(queryResponseDef, parameters);
	}

	/**
	 * This method is deprecated: please use {@link QueryTypeExecutor} class instead of this class, to execute this method. 
	 * It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0 version.
	 */
	@Deprecated
	@GraphQLNonScalar (fieldName = "__schema", graphQLTypeSimpleName = "__Schema", javaClass = __Schema.class)
	public __Schema __schema(String queryResponseDef, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.__schema(queryResponseDef, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link QueryTypeExecutor} class instead of this class, to execute this method. 
	 * It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0 version.
	 */
	@Deprecated
	@GraphQLNonScalar (fieldName = "__schema", graphQLTypeSimpleName = "__Schema", javaClass = __Schema.class)
	public __Schema __schemaWithBindValues(ObjectResponse objectResponse, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException  {
		return super.__schemaWithBindValues(objectResponse, parameters);
	}

	/**
	 * This method is deprecated: please use {@link QueryTypeExecutor} class instead of this class, to execute this method. 
	 * It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0 version.
	 */
	@Deprecated
	@GraphQLNonScalar (fieldName = "__schema", graphQLTypeSimpleName = "__Schema", javaClass = __Schema.class)
	public __Schema __schema(ObjectResponse objectResponse, Object... paramsAndValues)
			throws GraphQLRequestExecutionException  {
		return super.__schema(objectResponse, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link QueryTypeExecutor} class instead of this class, to execute this method. 
	 * It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0 version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder get__schemaResponseBuilder() throws GraphQLRequestPreparationException {
		return super.get__schemaResponseBuilder();
	}


	/**
	 * This method is deprecated: please use {@link QueryTypeExecutor} class instead of this class, to execute this method. 
	 * It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0 version.
	 */
	@Deprecated
	public GraphQLRequest get__schemaGraphQLRequest(String partialRequest) throws GraphQLRequestPreparationException {
		return super.get__schemaGraphQLRequest(partialRequest);
	}
	
	/**
	 * This method is deprecated: please use {@link QueryTypeExecutor} class instead of this class, to execute this method. 
	 * It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0 version.
	 */
	@Deprecated
	@GraphQLNonScalar (fieldName = "__type", graphQLTypeSimpleName = "__Type", javaClass = __Type.class)
	public __Type __typeWithBindValues(String queryResponseDef, String name, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.__typeWithBindValues(queryResponseDef, name, parameters);
	}

	/**
	 * This method is deprecated: please use {@link QueryTypeExecutor} class instead of this class, to execute this method. 
	 * It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0 version.
	 */
	@Deprecated
	@GraphQLNonScalar (fieldName = "__type", graphQLTypeSimpleName = "__Type", javaClass = __Type.class)
	public __Type __type(String queryResponseDef, String name, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.__type(queryResponseDef, name, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link QueryTypeExecutor} class instead of this class, to execute this method. 
	 * It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0 version.
	 */
	@Deprecated
	@GraphQLNonScalar (fieldName = "__type", graphQLTypeSimpleName = "__Type", javaClass = __Type.class)
	public __Type __typeWithBindValues(ObjectResponse objectResponse, String name, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException  {
		return super.__typeWithBindValues(objectResponse, name, parameters);
	}

	/**
	 * This method is deprecated: please use {@link QueryTypeExecutor} class instead of this class, to execute this method. 
	 * It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0 version.
	 */
	@Deprecated
	@GraphQLNonScalar (fieldName = "__type", graphQLTypeSimpleName = "__Type", javaClass = __Type.class)
	public __Type __type(ObjectResponse objectResponse, String name, Object... paramsAndValues)
			throws GraphQLRequestExecutionException  {
		return super.__type(objectResponse, name, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link QueryTypeExecutor} class instead of this class, to execute this method. 
	 * It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0 version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder get__typeResponseBuilder() throws GraphQLRequestPreparationException {
		return super.get__typeResponseBuilder();
	}


	/**
	 * This method is deprecated: please use {@link QueryTypeExecutor} class instead of this class, to execute this method. 
	 * It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0 version.
	 */
	@Deprecated
	public GraphQLRequest get__typeGraphQLRequest(String partialRequest) throws GraphQLRequestPreparationException {
		return super.get__typeGraphQLRequest(partialRequest);
	}
	
	/**
	 * This method is deprecated: please use {@link QueryTypeExecutor} class instead of this class, to execute this method. 
	 * It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0 version.
	 */
	@Deprecated
	@GraphQLScalar (fieldName = "__typename", graphQLTypeSimpleName = "String", javaClass = String.class)
	public java.lang.String __typenameWithBindValues(String queryResponseDef, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.__typenameWithBindValues(queryResponseDef, parameters);
	}

	/**
	 * This method is deprecated: please use {@link QueryTypeExecutor} class instead of this class, to execute this method. 
	 * It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0 version.
	 */
	@Deprecated
	@GraphQLScalar (fieldName = "__typename", graphQLTypeSimpleName = "String", javaClass = String.class)
	public java.lang.String __typename(String queryResponseDef, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		return super.__typename(queryResponseDef, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link QueryTypeExecutor} class instead of this class, to execute this method. 
	 * It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0 version.
	 */
	@Deprecated
	@GraphQLScalar (fieldName = "__typename", graphQLTypeSimpleName = "String", javaClass = String.class)
	public java.lang.String __typenameWithBindValues(ObjectResponse objectResponse, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException  {
		return super.__typenameWithBindValues(objectResponse, parameters);
	}

	/**
	 * This method is deprecated: please use {@link QueryTypeExecutor} class instead of this class, to execute this method. 
	 * It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0 version.
	 */
	@Deprecated
	@GraphQLScalar (fieldName = "__typename", graphQLTypeSimpleName = "String", javaClass = String.class)
	public java.lang.String __typename(ObjectResponse objectResponse, Object... paramsAndValues)
			throws GraphQLRequestExecutionException  {
		return super.__typename(objectResponse, paramsAndValues);
	}

	/**
	 * This method is deprecated: please use {@link QueryTypeExecutor} class instead of this class, to execute this method. 
	 * It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0 version.
	 */
	@Deprecated
	public com.graphql_java_generator.client.request.Builder get__typenameResponseBuilder() throws GraphQLRequestPreparationException {
		return super.get__typenameResponseBuilder();
	}


	/**
	 * This method is deprecated: please use {@link QueryTypeExecutor} class instead of this class, to execute this method. 
	 * It is maintained to keep existing code compatible with the generated code. It will be removed in 2.0 version.
	 */
	@Deprecated
	public GraphQLRequest get__typenameGraphQLRequest(String partialRequest) throws GraphQLRequestPreparationException {
		return super.get__typenameGraphQLRequest(partialRequest);
	}
	
}
