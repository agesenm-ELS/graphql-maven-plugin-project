/** Generated by the default template from graphql-java-generator */
package com.graphql_java_generator.server.domain.allGraphQLCases;

import java.util.List;
import java.util.NoSuchElementException;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;

import org.dataloader.BatchLoaderEnvironment;
import org.dataloader.DataLoader;
import org.reactivestreams.Publisher;

import graphql.schema.DataFetchingEnvironment;

import java.util.Date;
import java.util.UUID;

/**
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
public interface DataFetchersDelegateMyQueryType {
	
 
	/**
	 * This method loads the data for MyQueryType.withoutParameters. 
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
			 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public List<Character> withoutParameters(DataFetchingEnvironment dataFetchingEnvironment);


 
	/**
	 * This method loads the data for MyQueryType.withOneOptionalParam. 
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
			 * @param character 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
		 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public Character withOneOptionalParam(DataFetchingEnvironment dataFetchingEnvironment, CharacterInput character);


 
	/**
	 * This method loads the data for MyQueryType.withOneMandatoryParam. 
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
			 * @param character 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
		 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public Character withOneMandatoryParam(DataFetchingEnvironment dataFetchingEnvironment, CharacterInput character);


 
	/**
	 * This method loads the data for MyQueryType.withOneMandatoryParamDefaultValue. 
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
			 * @param intParam 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
		 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public Integer withOneMandatoryParamDefaultValue(DataFetchingEnvironment dataFetchingEnvironment, Integer intParam);


 
	/**
	 * This method loads the data for MyQueryType.withTwoMandatoryParamDefaultVal. 
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
			 * @param theHero 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
		 * @param num 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
		 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public Droid withTwoMandatoryParamDefaultVal(DataFetchingEnvironment dataFetchingEnvironment, DroidInput theHero, Integer num);


 
	/**
	 * This method loads the data for MyQueryType.withEnum. 
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
			 * @param episode 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
		 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public Character withEnum(DataFetchingEnvironment dataFetchingEnvironment, Episode episode);


 
	/**
	 * This method loads the data for MyQueryType.withListOfList. 
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
			 * @param matrix 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
		 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public AllFieldCases withListOfList(DataFetchingEnvironment dataFetchingEnvironment, List<List<Double>> matrix);


 
	/**
	 * This method loads the data for MyQueryType.withList. 
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
			 * @param firstName 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
		 * @param characters 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
		 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public List<Character> withList(DataFetchingEnvironment dataFetchingEnvironment, String firstName, List<CharacterInput> characters);


 
	/**
	 * This method loads the data for MyQueryType.allFieldCases. 
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
			 * @param input 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
		 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public AllFieldCases allFieldCases(DataFetchingEnvironment dataFetchingEnvironment, AllFieldCasesInput input);


 
	/**
	 * This method loads the data for MyQueryType.unionTest. 
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
			 * @param human1 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
		 * @param human2 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
		 * @param droid1 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
		 * @param droid2 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
		 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public List<AnyCharacter> unionTest(DataFetchingEnvironment dataFetchingEnvironment, HumanInput human1, HumanInput human2, DroidInput droid1, DroidInput droid2);


 
	/**
	 * This method loads the data for MyQueryType.error. 
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
			 * @param errorLabel 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
		 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public Character error(DataFetchingEnvironment dataFetchingEnvironment, String errorLabel);


 
	/**
	 * This method loads the data for MyQueryType.aBreak. 
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
			 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public _break aBreak(DataFetchingEnvironment dataFetchingEnvironment);


 
	/**
	 * This method loads the data for MyQueryType.directiveOnQuery. 
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
			 * @param uppercase 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
		 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public List<String> directiveOnQuery(DataFetchingEnvironment dataFetchingEnvironment, Boolean uppercase);


 
	/**
	 * This method loads the data for MyQueryType.directiveOnField. 
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
			 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public Character directiveOnField(DataFetchingEnvironment dataFetchingEnvironment);


 
	/**
	 * This method loads the data for MyQueryType.connectionWithoutParameters. 
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
			 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public List<Character> connectionWithoutParameters(DataFetchingEnvironment dataFetchingEnvironment);


 
	/**
	 * This method loads the data for MyQueryType.connectionOnHuman. 
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
			 * @param planet 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
		 * @param episode 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
		 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public List<Human> connectionOnHuman(DataFetchingEnvironment dataFetchingEnvironment, String planet, Episode episode);


 
	/**
	 * This method loads the data for MyQueryType.issue53. 
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
			 * @param date 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
		 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public Date issue53(DataFetchingEnvironment dataFetchingEnvironment, Date date);


 
	/**
	 * This method loads the data for MyQueryType.issue82Float. 
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
			 * @param aFloat 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
		 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public Double issue82Float(DataFetchingEnvironment dataFetchingEnvironment, Double aFloat);


 
	/**
	 * This method loads the data for MyQueryType.issue82ID. 
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
			 * @param aID 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
		 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public UUID issue82ID(DataFetchingEnvironment dataFetchingEnvironment, UUID aID);


 
	/**
	 * This method loads the data for MyQueryType.relay. 
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
			 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public MyQueryType relay(DataFetchingEnvironment dataFetchingEnvironment);


}
