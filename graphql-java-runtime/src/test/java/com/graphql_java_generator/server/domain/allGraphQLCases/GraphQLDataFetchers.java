/** Generated by the default template from graphql-java-generator */
package com.graphql_java_generator.server.domain.allGraphQLCases;

import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.dataloader.BatchLoader;
import org.dataloader.DataLoader;
import org.reactivestreams.Publisher;
import org.springframework.stereotype.Component;

import com.graphql_java_generator.util.GraphqlUtils;

import graphql.schema.DataFetcher;

import java.util.Date;
import java.util.UUID;

/**
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@Component
public class GraphQLDataFetchers {

	/** The logger for this instance */
	protected Logger logger = LoggerFactory.getLogger(GraphQLDataFetchers.class);

	@Resource
	protected DataFetchersDelegateMyQueryType dataFetchersDelegateMyQueryType;

	@Resource
	protected DataFetchersDelegateAnotherMutationType dataFetchersDelegateAnotherMutationType;

	@Resource
	protected DataFetchersDelegateTheSubscriptionType dataFetchersDelegateTheSubscriptionType;

	@Resource
	protected DataFetchersDelegateAllFieldCases dataFetchersDelegateAllFieldCases;

	@Resource
	protected DataFetchersDelegateAllFieldCasesInterfaceType dataFetchersDelegateAllFieldCasesInterfaceType;

	@Resource
	protected DataFetchersDelegateHuman dataFetchersDelegateHuman;

	@Resource
	protected DataFetchersDelegateDroid dataFetchersDelegateDroid;

	@Resource
	protected DataFetchersDelegateCommented dataFetchersDelegateCommented;

	@Resource
	protected DataFetchersDelegateAllFieldCasesInterface dataFetchersDelegateAllFieldCasesInterface;

	@Resource
	protected DataFetchersDelegateCharacter dataFetchersDelegateCharacter;

	@Resource
	protected DataFetchersDelegateAllFieldCasesWithIdSubtype dataFetchersDelegateAllFieldCasesWithIdSubtype;

	@Resource
	protected DataFetchersDelegateWithID dataFetchersDelegateWithID;

	@Resource
	protected GraphqlUtils graphqlUtils;

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateMyQueryType
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<Character>> dataFetchersDelegateMyQueryTypeWithoutParameters() {
		return dataFetchingEnvironment -> {
  
			List<Character> ret = dataFetchersDelegateMyQueryType.withoutParameters(dataFetchingEnvironment);
			logger.debug("withoutParameters: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<Character> dataFetchersDelegateMyQueryTypeWithOneOptionalParam() {
		return dataFetchingEnvironment -> {
			@SuppressWarnings("unchecked")
			CharacterInput character = (CharacterInput) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("character"), "${argument.type.graphQLTypeSimpleName}", "java.util.UUID", CharacterInput.class);
  
			Character ret = null;
			try {
				ret = dataFetchersDelegateMyQueryType.withOneOptionalParam(dataFetchingEnvironment, character);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("withOneOptionalParam: 1 result found");
			else
				logger.debug("withOneOptionalParam: no result found");

			return ret;
		};
	}


	public DataFetcher<Character> dataFetchersDelegateMyQueryTypeWithOneMandatoryParam() {
		return dataFetchingEnvironment -> {
			@SuppressWarnings("unchecked")
			CharacterInput character = (CharacterInput) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("character"), "${argument.type.graphQLTypeSimpleName}", "java.util.UUID", CharacterInput.class);
  
			Character ret = null;
			try {
				ret = dataFetchersDelegateMyQueryType.withOneMandatoryParam(dataFetchingEnvironment, character);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("withOneMandatoryParam: 1 result found");
			else
				logger.debug("withOneMandatoryParam: no result found");

			return ret;
		};
	}


	public DataFetcher<Integer> dataFetchersDelegateMyQueryTypeWithOneMandatoryParamDefaultValue() {
		return dataFetchingEnvironment -> {
			@SuppressWarnings("unchecked")
			Integer intParam = (Integer) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("intParam"), "${argument.type.graphQLTypeSimpleName}", "java.util.UUID", Integer.class);
  
			Integer ret = null;
			try {
				ret = dataFetchersDelegateMyQueryType.withOneMandatoryParamDefaultValue(dataFetchingEnvironment, intParam);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("withOneMandatoryParamDefaultValue: 1 result found");
			else
				logger.debug("withOneMandatoryParamDefaultValue: no result found");

			return ret;
		};
	}


	public DataFetcher<Droid> dataFetchersDelegateMyQueryTypeWithTwoMandatoryParamDefaultVal() {
		return dataFetchingEnvironment -> {
			@SuppressWarnings("unchecked")
			DroidInput theHero = (DroidInput) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("theHero"), "${argument.type.graphQLTypeSimpleName}", "java.util.UUID", DroidInput.class);
			@SuppressWarnings("unchecked")
			Integer num = (Integer) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("num"), "${argument.type.graphQLTypeSimpleName}", "java.util.UUID", Integer.class);
  
			Droid ret = null;
			try {
				ret = dataFetchersDelegateMyQueryType.withTwoMandatoryParamDefaultVal(dataFetchingEnvironment, theHero, num);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("withTwoMandatoryParamDefaultVal: 1 result found");
			else
				logger.debug("withTwoMandatoryParamDefaultVal: no result found");

			return ret;
		};
	}


	public DataFetcher<Character> dataFetchersDelegateMyQueryTypeWithEnum() {
		return dataFetchingEnvironment -> {
			@SuppressWarnings("unchecked")
			Episode episode = (Episode) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("episode"), "${argument.type.graphQLTypeSimpleName}", "java.util.UUID", Episode.class);
  
			Character ret = null;
			try {
				ret = dataFetchersDelegateMyQueryType.withEnum(dataFetchingEnvironment, episode);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("withEnum: 1 result found");
			else
				logger.debug("withEnum: no result found");

			return ret;
		};
	}


	public DataFetcher<AllFieldCases> dataFetchersDelegateMyQueryTypeWithListOfList() {
		return dataFetchingEnvironment -> {
			@SuppressWarnings("unchecked")
			List<List<Double>> matrix = (List<List<Double>>) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("matrix"), "${argument.type.graphQLTypeSimpleName}", "java.util.UUID", Double.class);
  
			AllFieldCases ret = null;
			try {
				ret = dataFetchersDelegateMyQueryType.withListOfList(dataFetchingEnvironment, matrix);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("withListOfList: 1 result found");
			else
				logger.debug("withListOfList: no result found");

			return ret;
		};
	}


	public DataFetcher<List<Character>> dataFetchersDelegateMyQueryTypeWithList() {
		return dataFetchingEnvironment -> {
			@SuppressWarnings("unchecked")
			String firstName = (String) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("firstName"), "${argument.type.graphQLTypeSimpleName}", "java.util.UUID", String.class);
			@SuppressWarnings("unchecked")
			List<CharacterInput> characters = (List<CharacterInput>) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("characters"), "${argument.type.graphQLTypeSimpleName}", "java.util.UUID", CharacterInput.class);
  
			List<Character> ret = dataFetchersDelegateMyQueryType.withList(dataFetchingEnvironment, firstName, characters);
			logger.debug("withList: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<AllFieldCases> dataFetchersDelegateMyQueryTypeAllFieldCases() {
		return dataFetchingEnvironment -> {
			@SuppressWarnings("unchecked")
			AllFieldCasesInput input = (AllFieldCasesInput) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("input"), "${argument.type.graphQLTypeSimpleName}", "java.util.UUID", AllFieldCasesInput.class);
  
			AllFieldCases ret = null;
			try {
				ret = dataFetchersDelegateMyQueryType.allFieldCases(dataFetchingEnvironment, input);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("allFieldCases: 1 result found");
			else
				logger.debug("allFieldCases: no result found");

			return ret;
		};
	}


	public DataFetcher<List<AnyCharacter>> dataFetchersDelegateMyQueryTypeUnionTest() {
		return dataFetchingEnvironment -> {
			@SuppressWarnings("unchecked")
			HumanInput human1 = (HumanInput) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("human1"), "${argument.type.graphQLTypeSimpleName}", "java.util.UUID", HumanInput.class);
			@SuppressWarnings("unchecked")
			HumanInput human2 = (HumanInput) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("human2"), "${argument.type.graphQLTypeSimpleName}", "java.util.UUID", HumanInput.class);
			@SuppressWarnings("unchecked")
			DroidInput droid1 = (DroidInput) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("droid1"), "${argument.type.graphQLTypeSimpleName}", "java.util.UUID", DroidInput.class);
			@SuppressWarnings("unchecked")
			DroidInput droid2 = (DroidInput) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("droid2"), "${argument.type.graphQLTypeSimpleName}", "java.util.UUID", DroidInput.class);
  
			List<AnyCharacter> ret = dataFetchersDelegateMyQueryType.unionTest(dataFetchingEnvironment, human1, human2, droid1, droid2);
			logger.debug("unionTest: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<Character> dataFetchersDelegateMyQueryTypeError() {
		return dataFetchingEnvironment -> {
			@SuppressWarnings("unchecked")
			String errorLabel = (String) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("errorLabel"), "${argument.type.graphQLTypeSimpleName}", "java.util.UUID", String.class);
  
			Character ret = null;
			try {
				ret = dataFetchersDelegateMyQueryType.error(dataFetchingEnvironment, errorLabel);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("error: 1 result found");
			else
				logger.debug("error: no result found");

			return ret;
		};
	}


	public DataFetcher<_break> dataFetchersDelegateMyQueryTypeABreak() {
		return dataFetchingEnvironment -> {
  
			_break ret = null;
			try {
				ret = dataFetchersDelegateMyQueryType.aBreak(dataFetchingEnvironment);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("aBreak: 1 result found");
			else
				logger.debug("aBreak: no result found");

			return ret;
		};
	}


	public DataFetcher<List<String>> dataFetchersDelegateMyQueryTypeDirectiveOnQuery() {
		return dataFetchingEnvironment -> {
			@SuppressWarnings("unchecked")
			Boolean uppercase = (Boolean) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("uppercase"), "${argument.type.graphQLTypeSimpleName}", "java.util.UUID", Boolean.class);
  
			List<String> ret = dataFetchersDelegateMyQueryType.directiveOnQuery(dataFetchingEnvironment, uppercase);
			logger.debug("directiveOnQuery: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<Character> dataFetchersDelegateMyQueryTypeDirectiveOnField() {
		return dataFetchingEnvironment -> {
  
			Character ret = null;
			try {
				ret = dataFetchersDelegateMyQueryType.directiveOnField(dataFetchingEnvironment);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("directiveOnField: 1 result found");
			else
				logger.debug("directiveOnField: no result found");

			return ret;
		};
	}


	public DataFetcher<List<Character>> dataFetchersDelegateMyQueryTypeConnectionWithoutParameters() {
		return dataFetchingEnvironment -> {
  
			List<Character> ret = dataFetchersDelegateMyQueryType.connectionWithoutParameters(dataFetchingEnvironment);
			logger.debug("connectionWithoutParameters: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<Human>> dataFetchersDelegateMyQueryTypeConnectionOnHuman() {
		return dataFetchingEnvironment -> {
			@SuppressWarnings("unchecked")
			String planet = (String) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("planet"), "${argument.type.graphQLTypeSimpleName}", "java.util.UUID", String.class);
			@SuppressWarnings("unchecked")
			Episode episode = (Episode) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("episode"), "${argument.type.graphQLTypeSimpleName}", "java.util.UUID", Episode.class);
  
			List<Human> ret = dataFetchersDelegateMyQueryType.connectionOnHuman(dataFetchingEnvironment, planet, episode);
			logger.debug("connectionOnHuman: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<Date> dataFetchersDelegateMyQueryTypeIssue53() {
		return dataFetchingEnvironment -> {
			@SuppressWarnings("unchecked")
			Date date = (Date) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("date"), "${argument.type.graphQLTypeSimpleName}", "java.util.UUID", Date.class);
  
			Date ret = null;
			try {
				ret = dataFetchersDelegateMyQueryType.issue53(dataFetchingEnvironment, date);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("issue53: 1 result found");
			else
				logger.debug("issue53: no result found");

			return ret;
		};
	}


	public DataFetcher<Double> dataFetchersDelegateMyQueryTypeIssue82Float() {
		return dataFetchingEnvironment -> {
			@SuppressWarnings("unchecked")
			Double aFloat = (Double) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("aFloat"), "${argument.type.graphQLTypeSimpleName}", "java.util.UUID", Double.class);
  
			Double ret = null;
			try {
				ret = dataFetchersDelegateMyQueryType.issue82Float(dataFetchingEnvironment, aFloat);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("issue82Float: 1 result found");
			else
				logger.debug("issue82Float: no result found");

			return ret;
		};
	}


	public DataFetcher<UUID> dataFetchersDelegateMyQueryTypeIssue82ID() {
		return dataFetchingEnvironment -> {
			@SuppressWarnings("unchecked")
			UUID aID = (UUID) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("aID"), "${argument.type.graphQLTypeSimpleName}", "java.util.UUID", UUID.class);
  
			UUID ret = null;
			try {
				ret = dataFetchersDelegateMyQueryType.issue82ID(dataFetchingEnvironment, aID);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("issue82ID: 1 result found");
			else
				logger.debug("issue82ID: no result found");

			return ret;
		};
	}


	public DataFetcher<MyQueryType> dataFetchersDelegateMyQueryTypeRelay() {
		return dataFetchingEnvironment -> {
  
			MyQueryType ret = null;
			try {
				ret = dataFetchersDelegateMyQueryType.relay(dataFetchingEnvironment);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("relay: 1 result found");
			else
				logger.debug("relay: no result found");

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateAnotherMutationType
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<Human> dataFetchersDelegateAnotherMutationTypeCreateHuman() {
		return dataFetchingEnvironment -> {
			@SuppressWarnings("unchecked")
			HumanInput human = (HumanInput) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("human"), "${argument.type.graphQLTypeSimpleName}", "java.util.UUID", HumanInput.class);
  
			Human ret = null;
			try {
				ret = dataFetchersDelegateAnotherMutationType.createHuman(dataFetchingEnvironment, human);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("createHuman: 1 result found");
			else
				logger.debug("createHuman: no result found");

			return ret;
		};
	}


	public DataFetcher<AllFieldCases> dataFetchersDelegateAnotherMutationTypeCreateAllFieldCases() {
		return dataFetchingEnvironment -> {
			@SuppressWarnings("unchecked")
			AllFieldCasesInput input = (AllFieldCasesInput) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("input"), "${argument.type.graphQLTypeSimpleName}", "java.util.UUID", AllFieldCasesInput.class);
  
			AllFieldCases ret = null;
			try {
				ret = dataFetchersDelegateAnotherMutationType.createAllFieldCases(dataFetchingEnvironment, input);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("createAllFieldCases: 1 result found");
			else
				logger.debug("createAllFieldCases: no result found");

			return ret;
		};
	}


	public DataFetcher<Boolean> dataFetchersDelegateAnotherMutationTypeDeleteSnacks() {
		return dataFetchingEnvironment -> {
			@SuppressWarnings("unchecked")
			List<UUID> id = (List<UUID>) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("id"), "${argument.type.graphQLTypeSimpleName}", "java.util.UUID", UUID.class);
  
			Boolean ret = null;
			try {
				ret = dataFetchersDelegateAnotherMutationType.deleteSnacks(dataFetchingEnvironment, id);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("deleteSnacks: 1 result found");
			else
				logger.debug("deleteSnacks: no result found");

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateTheSubscriptionType
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<Publisher<Human>> dataFetchersDelegateTheSubscriptionTypeSubscribeNewHumanForEpisode() {
		return dataFetchingEnvironment -> {
			@SuppressWarnings("unchecked")
			Episode episode = (Episode) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("episode"), "${argument.type.graphQLTypeSimpleName}", "java.util.UUID", Episode.class);
  
			Publisher<Human> ret = null;
			try {
				ret = dataFetchersDelegateTheSubscriptionType.subscribeNewHumanForEpisode(dataFetchingEnvironment, episode);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("subscribeNewHumanForEpisode: 1 result found");
			else
				logger.debug("subscribeNewHumanForEpisode: no result found");

			return ret;
		};
	}


	public DataFetcher<Publisher<List<Integer>>> dataFetchersDelegateTheSubscriptionTypeSubscribeToAList() {
		return dataFetchingEnvironment -> {
  
			Publisher<List<Integer>> ret = dataFetchersDelegateTheSubscriptionType.subscribeToAList(dataFetchingEnvironment);

			return ret;
		};
	}


	public DataFetcher<Publisher<Date>> dataFetchersDelegateTheSubscriptionTypeIssue53() {
		return dataFetchingEnvironment -> {
			@SuppressWarnings("unchecked")
			Date date = (Date) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("date"), "${argument.type.graphQLTypeSimpleName}", "java.util.UUID", Date.class);
  
			Publisher<Date> ret = null;
			try {
				ret = dataFetchersDelegateTheSubscriptionType.issue53(dataFetchingEnvironment, date);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("issue53: 1 result found");
			else
				logger.debug("issue53: no result found");

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateAllFieldCases
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<Date>> dataFetchersDelegateAllFieldCasesDates() {
		return dataFetchingEnvironment -> {
  			AllFieldCases source = dataFetchingEnvironment.getSource();

			List<Date> ret = dataFetchersDelegateAllFieldCases.dates(dataFetchingEnvironment, source);
			logger.debug("dates: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<String>> dataFetchersDelegateAllFieldCasesComments() {
		return dataFetchingEnvironment -> {
  			AllFieldCases source = dataFetchingEnvironment.getSource();

			List<String> ret = dataFetchersDelegateAllFieldCases.comments(dataFetchingEnvironment, source);
			logger.debug("comments: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<Boolean>> dataFetchersDelegateAllFieldCasesBooleans() {
		return dataFetchingEnvironment -> {
  			AllFieldCases source = dataFetchingEnvironment.getSource();

			List<Boolean> ret = dataFetchersDelegateAllFieldCases.booleans(dataFetchingEnvironment, source);
			logger.debug("booleans: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<String>> dataFetchersDelegateAllFieldCasesAliases() {
		return dataFetchingEnvironment -> {
  			AllFieldCases source = dataFetchingEnvironment.getSource();

			List<String> ret = dataFetchersDelegateAllFieldCases.aliases(dataFetchingEnvironment, source);
			logger.debug("aliases: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<String>> dataFetchersDelegateAllFieldCasesPlanets() {
		return dataFetchingEnvironment -> {
  			AllFieldCases source = dataFetchingEnvironment.getSource();

			List<String> ret = dataFetchersDelegateAllFieldCases.planets(dataFetchingEnvironment, source);
			logger.debug("planets: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<Human>> dataFetchersDelegateAllFieldCasesFriends() {
		return dataFetchingEnvironment -> {
  			AllFieldCases source = dataFetchingEnvironment.getSource();

			List<Human> ret = dataFetchersDelegateAllFieldCases.friends(dataFetchingEnvironment, source);
			logger.debug("friends: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<List<Double>>> dataFetchersDelegateAllFieldCasesMatrix() {
		return dataFetchingEnvironment -> {
  			AllFieldCases source = dataFetchingEnvironment.getSource();

			List<List<Double>> ret = dataFetchersDelegateAllFieldCases.matrix(dataFetchingEnvironment, source);
			logger.debug("matrix: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<CompletableFuture<AllFieldCasesWithIdSubtype>> dataFetchersDelegateAllFieldCasesOneWithIdSubTypeWithDataLoader() {
		return dataFetchingEnvironment -> {
			@SuppressWarnings("unchecked")
			Boolean uppercase = (Boolean) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("uppercase"), "${argument.type.graphQLTypeSimpleName}", "java.util.UUID", Boolean.class);
  			AllFieldCases source = dataFetchingEnvironment.getSource();

			DataLoader<UUID, AllFieldCasesWithIdSubtype> dataLoader = dataFetchingEnvironment.getDataLoader("AllFieldCasesWithIdSubtype"); 
			
			// This dataLoader may be null. Let's handle that:
			if (dataLoader != null) { 
				return dataFetchersDelegateAllFieldCases.oneWithIdSubType(dataFetchingEnvironment, dataLoader, source, uppercase);
			} else {
				logger.warn("No DataLoader found for key '{}'", "AllFieldCasesWithIdSubtype");
				return CompletableFuture.supplyAsync(
						() -> dataFetchersDelegateAllFieldCases.oneWithIdSubType(dataFetchingEnvironment, source, uppercase));
			}
		};
	}


	public DataFetcher<List<AllFieldCasesWithIdSubtype>> dataFetchersDelegateAllFieldCasesListWithIdSubTypes() {
		return dataFetchingEnvironment -> {
			@SuppressWarnings("unchecked")
			Long nbItems = (Long) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("nbItems"), "${argument.type.graphQLTypeSimpleName}", "java.util.UUID", Long.class);
			@SuppressWarnings("unchecked")
			Date date = (Date) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("date"), "${argument.type.graphQLTypeSimpleName}", "java.util.UUID", Date.class);
			@SuppressWarnings("unchecked")
			List<Date> dates = (List<Date>) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("dates"), "${argument.type.graphQLTypeSimpleName}", "java.util.UUID", Date.class);
			@SuppressWarnings("unchecked")
			Boolean uppercaseName = (Boolean) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("uppercaseName"), "${argument.type.graphQLTypeSimpleName}", "java.util.UUID", Boolean.class);
			@SuppressWarnings("unchecked")
			String textToAppendToTheForname = (String) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("textToAppendToTheForname"), "${argument.type.graphQLTypeSimpleName}", "java.util.UUID", String.class);
  			AllFieldCases source = dataFetchingEnvironment.getSource();

			List<AllFieldCasesWithIdSubtype> ret = dataFetchersDelegateAllFieldCases.listWithIdSubTypes(dataFetchingEnvironment, source, nbItems, date, dates, uppercaseName, textToAppendToTheForname);
			logger.debug("listWithIdSubTypes: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<AllFieldCasesWithoutIdSubtype> dataFetchersDelegateAllFieldCasesOneWithoutIdSubType() {
		return dataFetchingEnvironment -> {
			@SuppressWarnings("unchecked")
			FieldParameterInput input = (FieldParameterInput) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("input"), "${argument.type.graphQLTypeSimpleName}", "java.util.UUID", FieldParameterInput.class);
  			AllFieldCases source = dataFetchingEnvironment.getSource();

			AllFieldCasesWithoutIdSubtype ret = null;
			try {
				ret = dataFetchersDelegateAllFieldCases.oneWithoutIdSubType(dataFetchingEnvironment, source, input);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("oneWithoutIdSubType: 1 result found");
			else
				logger.debug("oneWithoutIdSubType: no result found");

			return ret;
		};
	}


	public DataFetcher<List<AllFieldCasesWithoutIdSubtype>> dataFetchersDelegateAllFieldCasesListWithoutIdSubTypes() {
		return dataFetchingEnvironment -> {
			@SuppressWarnings("unchecked")
			Long nbItems = (Long) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("nbItems"), "${argument.type.graphQLTypeSimpleName}", "java.util.UUID", Long.class);
			@SuppressWarnings("unchecked")
			FieldParameterInput input = (FieldParameterInput) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("input"), "${argument.type.graphQLTypeSimpleName}", "java.util.UUID", FieldParameterInput.class);
			@SuppressWarnings("unchecked")
			String textToAppendToTheForname = (String) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("textToAppendToTheForname"), "${argument.type.graphQLTypeSimpleName}", "java.util.UUID", String.class);
  			AllFieldCases source = dataFetchingEnvironment.getSource();

			List<AllFieldCasesWithoutIdSubtype> ret = dataFetchersDelegateAllFieldCases.listWithoutIdSubTypes(dataFetchingEnvironment, source, nbItems, input, textToAppendToTheForname);
			logger.debug("listWithoutIdSubTypes: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<AllFieldCasesWithoutIdSubtype>> dataFetchersDelegateAllFieldCasesIssue65() {
		return dataFetchingEnvironment -> {
			@SuppressWarnings("unchecked")
			List<FieldParameterInput> inputs = (List<FieldParameterInput>) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("inputs"), "${argument.type.graphQLTypeSimpleName}", "java.util.UUID", FieldParameterInput.class);
  			AllFieldCases source = dataFetchingEnvironment.getSource();

			List<AllFieldCasesWithoutIdSubtype> ret = dataFetchersDelegateAllFieldCases.issue65(dataFetchingEnvironment, source, inputs);
			logger.debug("issue65: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<CompletableFuture<AllFieldCases>> dataFetchersDelegateAllFieldCasesIssue66WithDataLoader() {
		return dataFetchingEnvironment -> {
			@SuppressWarnings("unchecked")
			List<AllFieldCasesInput> input = (List<AllFieldCasesInput>) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("input"), "${argument.type.graphQLTypeSimpleName}", "java.util.UUID", AllFieldCasesInput.class);
  			AllFieldCases source = dataFetchingEnvironment.getSource();

			DataLoader<UUID, AllFieldCases> dataLoader = dataFetchingEnvironment.getDataLoader("AllFieldCases"); 
			
			// This dataLoader may be null. Let's handle that:
			if (dataLoader != null) { 
				return dataFetchersDelegateAllFieldCases.issue66(dataFetchingEnvironment, dataLoader, source, input);
			} else {
				logger.warn("No DataLoader found for key '{}'", "AllFieldCases");
				return CompletableFuture.supplyAsync(
						() -> dataFetchersDelegateAllFieldCases.issue66(dataFetchingEnvironment, source, input));
			}
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateAllFieldCasesInterfaceType
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<String>> dataFetchersDelegateAllFieldCasesInterfaceTypeComments() {
		return dataFetchingEnvironment -> {
  			AllFieldCasesInterfaceType source = dataFetchingEnvironment.getSource();

			List<String> ret = dataFetchersDelegateAllFieldCasesInterfaceType.comments(dataFetchingEnvironment, source);
			logger.debug("comments: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<Boolean>> dataFetchersDelegateAllFieldCasesInterfaceTypeBooleans() {
		return dataFetchingEnvironment -> {
  			AllFieldCasesInterfaceType source = dataFetchingEnvironment.getSource();

			List<Boolean> ret = dataFetchersDelegateAllFieldCasesInterfaceType.booleans(dataFetchingEnvironment, source);
			logger.debug("booleans: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<String>> dataFetchersDelegateAllFieldCasesInterfaceTypeAliases() {
		return dataFetchingEnvironment -> {
  			AllFieldCasesInterfaceType source = dataFetchingEnvironment.getSource();

			List<String> ret = dataFetchersDelegateAllFieldCasesInterfaceType.aliases(dataFetchingEnvironment, source);
			logger.debug("aliases: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<String>> dataFetchersDelegateAllFieldCasesInterfaceTypePlanets() {
		return dataFetchingEnvironment -> {
  			AllFieldCasesInterfaceType source = dataFetchingEnvironment.getSource();

			List<String> ret = dataFetchersDelegateAllFieldCasesInterfaceType.planets(dataFetchingEnvironment, source);
			logger.debug("planets: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<Human>> dataFetchersDelegateAllFieldCasesInterfaceTypeFriends() {
		return dataFetchingEnvironment -> {
  			AllFieldCasesInterfaceType source = dataFetchingEnvironment.getSource();

			List<Human> ret = dataFetchersDelegateAllFieldCasesInterfaceType.friends(dataFetchingEnvironment, source);
			logger.debug("friends: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<CompletableFuture<AllFieldCasesWithIdSubtype>> dataFetchersDelegateAllFieldCasesInterfaceTypeOneWithIdSubTypeWithDataLoader() {
		return dataFetchingEnvironment -> {
  			AllFieldCasesInterfaceType source = dataFetchingEnvironment.getSource();

			DataLoader<UUID, AllFieldCasesWithIdSubtype> dataLoader = dataFetchingEnvironment.getDataLoader("AllFieldCasesWithIdSubtype"); 
			
			// This dataLoader may be null. Let's handle that:
			if (dataLoader != null) { 
				return dataFetchersDelegateAllFieldCasesInterfaceType.oneWithIdSubType(dataFetchingEnvironment, dataLoader, source);
			} else {
				logger.warn("No DataLoader found for key '{}'", "AllFieldCasesWithIdSubtype");
				return CompletableFuture.supplyAsync(
						() -> dataFetchersDelegateAllFieldCasesInterfaceType.oneWithIdSubType(dataFetchingEnvironment, source));
			}
		};
	}


	public DataFetcher<List<AllFieldCasesWithIdSubtype>> dataFetchersDelegateAllFieldCasesInterfaceTypeListWithIdSubTypes() {
		return dataFetchingEnvironment -> {
			@SuppressWarnings("unchecked")
			Integer nbItems = (Integer) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("nbItems"), "${argument.type.graphQLTypeSimpleName}", "java.util.UUID", Integer.class);
			@SuppressWarnings("unchecked")
			Boolean uppercaseName = (Boolean) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("uppercaseName"), "${argument.type.graphQLTypeSimpleName}", "java.util.UUID", Boolean.class);
			@SuppressWarnings("unchecked")
			String textToAppendToTheForname = (String) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("textToAppendToTheForname"), "${argument.type.graphQLTypeSimpleName}", "java.util.UUID", String.class);
  			AllFieldCasesInterfaceType source = dataFetchingEnvironment.getSource();

			List<AllFieldCasesWithIdSubtype> ret = dataFetchersDelegateAllFieldCasesInterfaceType.listWithIdSubTypes(dataFetchingEnvironment, source, nbItems, uppercaseName, textToAppendToTheForname);
			logger.debug("listWithIdSubTypes: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<AllFieldCasesWithoutIdSubtype> dataFetchersDelegateAllFieldCasesInterfaceTypeOneWithoutIdSubType() {
		return dataFetchingEnvironment -> {
			@SuppressWarnings("unchecked")
			FieldParameterInput input = (FieldParameterInput) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("input"), "${argument.type.graphQLTypeSimpleName}", "java.util.UUID", FieldParameterInput.class);
  			AllFieldCasesInterfaceType source = dataFetchingEnvironment.getSource();

			AllFieldCasesWithoutIdSubtype ret = null;
			try {
				ret = dataFetchersDelegateAllFieldCasesInterfaceType.oneWithoutIdSubType(dataFetchingEnvironment, source, input);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("oneWithoutIdSubType: 1 result found");
			else
				logger.debug("oneWithoutIdSubType: no result found");

			return ret;
		};
	}


	public DataFetcher<List<AllFieldCasesWithoutIdSubtype>> dataFetchersDelegateAllFieldCasesInterfaceTypeListWithoutIdSubTypes() {
		return dataFetchingEnvironment -> {
			@SuppressWarnings("unchecked")
			Integer nbItems = (Integer) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("nbItems"), "${argument.type.graphQLTypeSimpleName}", "java.util.UUID", Integer.class);
			@SuppressWarnings("unchecked")
			FieldParameterInput input = (FieldParameterInput) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("input"), "${argument.type.graphQLTypeSimpleName}", "java.util.UUID", FieldParameterInput.class);
			@SuppressWarnings("unchecked")
			String textToAppendToTheForname = (String) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("textToAppendToTheForname"), "${argument.type.graphQLTypeSimpleName}", "java.util.UUID", String.class);
  			AllFieldCasesInterfaceType source = dataFetchingEnvironment.getSource();

			List<AllFieldCasesWithoutIdSubtype> ret = dataFetchersDelegateAllFieldCasesInterfaceType.listWithoutIdSubTypes(dataFetchingEnvironment, source, nbItems, input, textToAppendToTheForname);
			logger.debug("listWithoutIdSubTypes: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateHuman
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<CompletableFuture<Character>> dataFetchersDelegateHumanBestFriendWithDataLoader() {
		return dataFetchingEnvironment -> {
  			Human source = dataFetchingEnvironment.getSource();

			DataLoader<UUID, Character> dataLoader = dataFetchingEnvironment.getDataLoader("Character"); 
			
			// This dataLoader may be null. Let's handle that:
			if (dataLoader != null) { 
				return dataFetchersDelegateHuman.bestFriend(dataFetchingEnvironment, dataLoader, source);
			} else {
				logger.warn("No DataLoader found for key '{}'", "Character");
				return CompletableFuture.supplyAsync(
						() -> dataFetchersDelegateHuman.bestFriend(dataFetchingEnvironment, source));
			}
		};
	}


	public DataFetcher<List<Character>> dataFetchersDelegateHumanFriends() {
		return dataFetchingEnvironment -> {
  			Human source = dataFetchingEnvironment.getSource();

			List<Character> ret = dataFetchersDelegateHuman.friends(dataFetchingEnvironment, source);
			logger.debug("friends: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<String>> dataFetchersDelegateHumanComments() {
		return dataFetchingEnvironment -> {
  			Human source = dataFetchingEnvironment.getSource();

			List<String> ret = dataFetchersDelegateHuman.comments(dataFetchingEnvironment, source);
			logger.debug("comments: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<Episode>> dataFetchersDelegateHumanAppearsIn() {
		return dataFetchingEnvironment -> {
  			Human source = dataFetchingEnvironment.getSource();

			List<Episode> ret = dataFetchersDelegateHuman.appearsIn(dataFetchingEnvironment, source);
			logger.debug("appearsIn: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateDroid
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<Character>> dataFetchersDelegateDroidFriends() {
		return dataFetchingEnvironment -> {
  			Droid source = dataFetchingEnvironment.getSource();

			List<Character> ret = dataFetchersDelegateDroid.friends(dataFetchingEnvironment, source);
			logger.debug("friends: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<Episode>> dataFetchersDelegateDroidAppearsIn() {
		return dataFetchingEnvironment -> {
  			Droid source = dataFetchingEnvironment.getSource();

			List<Episode> ret = dataFetchersDelegateDroid.appearsIn(dataFetchingEnvironment, source);
			logger.debug("appearsIn: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateCommented
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<String>> dataFetchersDelegateCommentedComments() {
		return dataFetchingEnvironment -> {
  			Commented source = dataFetchingEnvironment.getSource();

			List<String> ret = dataFetchersDelegateCommented.comments(dataFetchingEnvironment, source);
			logger.debug("comments: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateAllFieldCasesInterface
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<String>> dataFetchersDelegateAllFieldCasesInterfaceComments() {
		return dataFetchingEnvironment -> {
  			AllFieldCasesInterface source = dataFetchingEnvironment.getSource();

			List<String> ret = dataFetchersDelegateAllFieldCasesInterface.comments(dataFetchingEnvironment, source);
			logger.debug("comments: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<Boolean>> dataFetchersDelegateAllFieldCasesInterfaceBooleans() {
		return dataFetchingEnvironment -> {
  			AllFieldCasesInterface source = dataFetchingEnvironment.getSource();

			List<Boolean> ret = dataFetchersDelegateAllFieldCasesInterface.booleans(dataFetchingEnvironment, source);
			logger.debug("booleans: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<String>> dataFetchersDelegateAllFieldCasesInterfaceAliases() {
		return dataFetchingEnvironment -> {
  			AllFieldCasesInterface source = dataFetchingEnvironment.getSource();

			List<String> ret = dataFetchersDelegateAllFieldCasesInterface.aliases(dataFetchingEnvironment, source);
			logger.debug("aliases: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<String>> dataFetchersDelegateAllFieldCasesInterfacePlanets() {
		return dataFetchingEnvironment -> {
  			AllFieldCasesInterface source = dataFetchingEnvironment.getSource();

			List<String> ret = dataFetchersDelegateAllFieldCasesInterface.planets(dataFetchingEnvironment, source);
			logger.debug("planets: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<Human>> dataFetchersDelegateAllFieldCasesInterfaceFriends() {
		return dataFetchingEnvironment -> {
  			AllFieldCasesInterface source = dataFetchingEnvironment.getSource();

			List<Human> ret = dataFetchersDelegateAllFieldCasesInterface.friends(dataFetchingEnvironment, source);
			logger.debug("friends: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<CompletableFuture<AllFieldCasesWithIdSubtype>> dataFetchersDelegateAllFieldCasesInterfaceOneWithIdSubTypeWithDataLoader() {
		return dataFetchingEnvironment -> {
  			AllFieldCasesInterface source = dataFetchingEnvironment.getSource();

			DataLoader<UUID, AllFieldCasesWithIdSubtype> dataLoader = dataFetchingEnvironment.getDataLoader("AllFieldCasesWithIdSubtype"); 
			
			// This dataLoader may be null. Let's handle that:
			if (dataLoader != null) { 
				return dataFetchersDelegateAllFieldCasesInterface.oneWithIdSubType(dataFetchingEnvironment, dataLoader, source);
			} else {
				logger.warn("No DataLoader found for key '{}'", "AllFieldCasesWithIdSubtype");
				return CompletableFuture.supplyAsync(
						() -> dataFetchersDelegateAllFieldCasesInterface.oneWithIdSubType(dataFetchingEnvironment, source));
			}
		};
	}


	public DataFetcher<List<AllFieldCasesWithIdSubtype>> dataFetchersDelegateAllFieldCasesInterfaceListWithIdSubTypes() {
		return dataFetchingEnvironment -> {
			@SuppressWarnings("unchecked")
			Integer nbItems = (Integer) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("nbItems"), "${argument.type.graphQLTypeSimpleName}", "java.util.UUID", Integer.class);
			@SuppressWarnings("unchecked")
			Boolean uppercaseName = (Boolean) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("uppercaseName"), "${argument.type.graphQLTypeSimpleName}", "java.util.UUID", Boolean.class);
			@SuppressWarnings("unchecked")
			String textToAppendToTheForname = (String) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("textToAppendToTheForname"), "${argument.type.graphQLTypeSimpleName}", "java.util.UUID", String.class);
  			AllFieldCasesInterface source = dataFetchingEnvironment.getSource();

			List<AllFieldCasesWithIdSubtype> ret = dataFetchersDelegateAllFieldCasesInterface.listWithIdSubTypes(dataFetchingEnvironment, source, nbItems, uppercaseName, textToAppendToTheForname);
			logger.debug("listWithIdSubTypes: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<AllFieldCasesWithoutIdSubtype> dataFetchersDelegateAllFieldCasesInterfaceOneWithoutIdSubType() {
		return dataFetchingEnvironment -> {
			@SuppressWarnings("unchecked")
			FieldParameterInput input = (FieldParameterInput) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("input"), "${argument.type.graphQLTypeSimpleName}", "java.util.UUID", FieldParameterInput.class);
  			AllFieldCasesInterface source = dataFetchingEnvironment.getSource();

			AllFieldCasesWithoutIdSubtype ret = null;
			try {
				ret = dataFetchersDelegateAllFieldCasesInterface.oneWithoutIdSubType(dataFetchingEnvironment, source, input);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("oneWithoutIdSubType: 1 result found");
			else
				logger.debug("oneWithoutIdSubType: no result found");

			return ret;
		};
	}


	public DataFetcher<List<AllFieldCasesWithoutIdSubtype>> dataFetchersDelegateAllFieldCasesInterfaceListWithoutIdSubTypes() {
		return dataFetchingEnvironment -> {
			@SuppressWarnings("unchecked")
			Integer nbItems = (Integer) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("nbItems"), "${argument.type.graphQLTypeSimpleName}", "java.util.UUID", Integer.class);
			@SuppressWarnings("unchecked")
			FieldParameterInput input = (FieldParameterInput) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("input"), "${argument.type.graphQLTypeSimpleName}", "java.util.UUID", FieldParameterInput.class);
			@SuppressWarnings("unchecked")
			String textToAppendToTheForname = (String) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("textToAppendToTheForname"), "${argument.type.graphQLTypeSimpleName}", "java.util.UUID", String.class);
  			AllFieldCasesInterface source = dataFetchingEnvironment.getSource();

			List<AllFieldCasesWithoutIdSubtype> ret = dataFetchersDelegateAllFieldCasesInterface.listWithoutIdSubTypes(dataFetchingEnvironment, source, nbItems, input, textToAppendToTheForname);
			logger.debug("listWithoutIdSubTypes: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateCharacter
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<Character>> dataFetchersDelegateCharacterFriends() {
		return dataFetchingEnvironment -> {
  			Character source = dataFetchingEnvironment.getSource();

			List<Character> ret = dataFetchersDelegateCharacter.friends(dataFetchingEnvironment, source);
			logger.debug("friends: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<Episode>> dataFetchersDelegateCharacterAppearsIn() {
		return dataFetchingEnvironment -> {
  			Character source = dataFetchingEnvironment.getSource();

			List<Episode> ret = dataFetchersDelegateCharacter.appearsIn(dataFetchingEnvironment, source);
			logger.debug("appearsIn: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateAllFieldCasesWithIdSubtype
	////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateWithID
	////////////////////////////////////////////////////////////////////////////////////////////////
}
