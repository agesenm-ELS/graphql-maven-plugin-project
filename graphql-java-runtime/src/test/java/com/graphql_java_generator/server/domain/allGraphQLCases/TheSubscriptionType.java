/** Generated by the default template from graphql-java-generator */
package com.graphql_java_generator.server.domain.allGraphQLCases;

import java.util.HashMap;
import java.util.Map;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.graphql_java_generator.exception.GraphQLRequestExecutionException;

import com.graphql_java_generator.GraphQLField;
import com.graphql_java_generator.annotation.GraphQLInputParameters;
import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLScalar;
import java.util.Date;
import java.util.List;
import javax.persistence.Transient;

/**
 *
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLObjectType("TheSubscriptionType")
public class TheSubscriptionType 
{

	public TheSubscriptionType(){
		// No action
	}

	/**
	 *  Will be notified for each Human added to this Episode
	 */
	@GraphQLNonScalar(fieldName = "subscribeNewHumanForEpisode", graphQLTypeSimpleName = "Human", javaClass = Human.class)
	Human subscribeNewHumanForEpisode;


	/**
	 * Issue 54
	 */
	@Transient
	@GraphQLScalar(fieldName = "subscribeToAList", graphQLTypeSimpleName = "Int", javaClass = Integer.class)
	List<Integer> subscribeToAList;


	/**
	 * issue53 is about custom scalars as parameter for a query/mutation/subscription, that was not properly serialized/deserialized
	 */
	@GraphQLScalar(fieldName = "issue53", graphQLTypeSimpleName = "Date", javaClass = Date.class)
	Date issue53;



	/**
	 *  Will be notified for each Human added to this Episode
	 */
	public void setSubscribeNewHumanForEpisode(Human subscribeNewHumanForEpisode) {
		this.subscribeNewHumanForEpisode = subscribeNewHumanForEpisode;
	}

	/**
	 *  Will be notified for each Human added to this Episode
	 */
	public Human getSubscribeNewHumanForEpisode() {
		return subscribeNewHumanForEpisode;
	}

	/**
	 * Issue 54
	 */
	public void setSubscribeToAList(List<Integer> subscribeToAList) {
		this.subscribeToAList = subscribeToAList;
	}

	/**
	 * Issue 54
	 */
	public List<Integer> getSubscribeToAList() {
		return subscribeToAList;
	}

	/**
	 * issue53 is about custom scalars as parameter for a query/mutation/subscription, that was not properly serialized/deserialized
	 */
	public void setIssue53(Date issue53) {
		this.issue53 = issue53;
	}

	/**
	 * issue53 is about custom scalars as parameter for a query/mutation/subscription, that was not properly serialized/deserialized
	 */
	public Date getIssue53() {
		return issue53;
	}

    public String toString() {
        return "TheSubscriptionType {"
				+ "subscribeNewHumanForEpisode: " + subscribeNewHumanForEpisode
				+ ", "
				+ "subscribeToAList: " + subscribeToAList
				+ ", "
				+ "issue53: " + issue53
        		+ "}";
    }

    /**
	 * Enum of field names
	 */
	 public static enum Field implements GraphQLField {
		SubscribeNewHumanForEpisode("subscribeNewHumanForEpisode"),
		SubscribeToAList("subscribeToAList"),
		Issue53("issue53");

		private String fieldName;

		Field(String fieldName) {
			this.fieldName = fieldName;
		}

		public String getFieldName() {
			return fieldName;
		}

		public Class<?> getGraphQLType() {
			return this.getClass().getDeclaringClass();
		}

	}

	public static Builder builder() {
			return new Builder();
		}



	/**
	 * Builder
	 */
	public static class Builder {
		private Human subscribeNewHumanForEpisode;
		private List<Integer> subscribeToAList;
		private Date issue53;


		public Builder withSubscribeNewHumanForEpisode(Human subscribeNewHumanForEpisode) {
			this.subscribeNewHumanForEpisode = subscribeNewHumanForEpisode;
			return this;
		}
		public Builder withSubscribeToAList(List<Integer> subscribeToAList) {
			this.subscribeToAList = subscribeToAList;
			return this;
		}
		public Builder withIssue53(Date issue53) {
			this.issue53 = issue53;
			return this;
		}

		public TheSubscriptionType build() {
			TheSubscriptionType _object = new TheSubscriptionType();
			_object.setSubscribeNewHumanForEpisode(subscribeNewHumanForEpisode);
			_object.setSubscribeToAList(subscribeToAList);
			_object.setIssue53(issue53);
			return _object;
		}
	}
}
