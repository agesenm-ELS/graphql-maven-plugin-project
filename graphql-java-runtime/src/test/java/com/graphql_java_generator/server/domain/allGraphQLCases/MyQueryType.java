/** Generated by the default template from graphql-java-generator */
package com.graphql_java_generator.server.domain.allGraphQLCases;

import java.util.HashMap;
import java.util.Map;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.graphql_java_generator.exception.GraphQLRequestExecutionException;

import com.graphql_java_generator.GraphQLField;
import com.graphql_java_generator.annotation.GraphQLInputParameters;
import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLScalar;
import java.util.Date;
import java.util.List;
import java.util.UUID;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Transient;

/**
 *
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLObjectType("MyQueryType")
public class MyQueryType 
{

	public MyQueryType(){
		// No action
	}

	@Transient
	@GraphQLNonScalar(fieldName = "withoutParameters", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	List<Character> withoutParameters;


	@GraphQLNonScalar(fieldName = "withOneOptionalParam", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	Character withOneOptionalParam;


	@GraphQLNonScalar(fieldName = "withOneMandatoryParam", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	Character withOneMandatoryParam;


	@GraphQLScalar(fieldName = "withOneMandatoryParamDefaultValue", graphQLTypeSimpleName = "Int", javaClass = Integer.class)
	Integer withOneMandatoryParamDefaultValue;


	@GraphQLNonScalar(fieldName = "withTwoMandatoryParamDefaultVal", graphQLTypeSimpleName = "Droid", javaClass = Droid.class)
	Droid withTwoMandatoryParamDefaultVal;


	@GraphQLNonScalar(fieldName = "withEnum", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	Character withEnum;


	@GraphQLNonScalar(fieldName = "withListOfList", graphQLTypeSimpleName = "AllFieldCases", javaClass = AllFieldCases.class)
	AllFieldCases withListOfList;


	/**
	 * ###############################################################################
	 *  withList return a list of Characters, matching the given list of CharacterInput.
	 *  The name of the first Character returned is replaced by the given firstName.
	 *  All ids are generated  
	 */
	@Transient
	@GraphQLNonScalar(fieldName = "withList", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	List<Character> withList;


	/**
	 * ###############################################################################
	 *  Complementary tests with the AllFieldCases Object
	 */
	@GraphQLNonScalar(fieldName = "allFieldCases", graphQLTypeSimpleName = "AllFieldCases", javaClass = AllFieldCases.class)
	AllFieldCases allFieldCases;


	/**
	 * ###############################################################################
	 *  Test for unions
	 */
	@Transient
	@GraphQLNonScalar(fieldName = "unionTest", graphQLTypeSimpleName = "AnyCharacter", javaClass = AnyCharacter.class)
	List<AnyCharacter> unionTest;


	/**
	 * ###############################################################################
	 *  error always returns an error!  (used to check the error management)
	 */
	@GraphQLNonScalar(fieldName = "error", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	Character error;


	/**
	 *  Check for GraphQL identifier that are java keywords
	 */
	@GraphQLNonScalar(fieldName = "aBreak", graphQLTypeSimpleName = "break", javaClass = _break.class)
	_break aBreak;


	/**
	 * ###############################################################################
	 *  queries to check directive behavior
	 *  Returns the value, and potentially the anotherValue of the @testDirective directive set on the directiveOnQuery query. 
	 *  List is null if the directive is not present.
	 */
	@Transient
	@GraphQLScalar(fieldName = "directiveOnQuery", graphQLTypeSimpleName = "String", javaClass = String.class)
	List<String> directiveOnQuery;


	/**
	 *  Returns the value, and potentially the anotherValue of the @testDirective directive set on the @directiveOnQuery. 
	 *  List is null if the directive is not present.
	 */
	@GraphQLNonScalar(fieldName = "directiveOnField", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	Character directiveOnField;


	/**
	 * ###############################################################################
	 *  queries to check the addRelayConnections capability
	 */
	@Transient
	@GraphQLNonScalar(fieldName = "connectionWithoutParameters", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	List<Character> connectionWithoutParameters;


	@Transient
	@GraphQLNonScalar(fieldName = "connectionOnHuman", graphQLTypeSimpleName = "Human", javaClass = Human.class)
	List<Human> connectionOnHuman;


	/**
	 * ###############################################################################
	 *  queries created to test some issues
	 * issue53 is about custom scalars as parameter for a query/mutation/subscription, that was not properly serialized/deserialized
	 */
	@GraphQLScalar(fieldName = "issue53", graphQLTypeSimpleName = "Date", javaClass = Date.class)
	Date issue53;


	/**
	 * issue82 is about hard coded values as parameters. Other types are tests with other queries, but there was no method with a simple float parameter
	 */
	@GraphQLScalar(fieldName = "issue82Float", graphQLTypeSimpleName = "Float", javaClass = Double.class)
	Double issue82Float;


	@Id
	@GeneratedValue
	@GraphQLScalar(fieldName = "issue82ID", graphQLTypeSimpleName = "ID", javaClass = UUID.class)
	UUID issue82ID;


	/**
	 * ###############################################################################
	 *  A particular test, based on the github schema: a query that returns the query object.
	 *  It introduces complexity in the code generation, that must be tested    
	 */
	@GraphQLNonScalar(fieldName = "relay", graphQLTypeSimpleName = "MyQueryType", javaClass = MyQueryType.class)
	MyQueryType relay;



	public void setWithoutParameters(List<Character> withoutParameters) {
		this.withoutParameters = withoutParameters;
	}

	public List<Character> getWithoutParameters() {
		return withoutParameters;
	}

	public void setWithOneOptionalParam(Character withOneOptionalParam) {
		this.withOneOptionalParam = withOneOptionalParam;
	}

	public Character getWithOneOptionalParam() {
		return withOneOptionalParam;
	}

	public void setWithOneMandatoryParam(Character withOneMandatoryParam) {
		this.withOneMandatoryParam = withOneMandatoryParam;
	}

	public Character getWithOneMandatoryParam() {
		return withOneMandatoryParam;
	}

	public void setWithOneMandatoryParamDefaultValue(Integer withOneMandatoryParamDefaultValue) {
		this.withOneMandatoryParamDefaultValue = withOneMandatoryParamDefaultValue;
	}

	public Integer getWithOneMandatoryParamDefaultValue() {
		return withOneMandatoryParamDefaultValue;
	}

	public void setWithTwoMandatoryParamDefaultVal(Droid withTwoMandatoryParamDefaultVal) {
		this.withTwoMandatoryParamDefaultVal = withTwoMandatoryParamDefaultVal;
	}

	public Droid getWithTwoMandatoryParamDefaultVal() {
		return withTwoMandatoryParamDefaultVal;
	}

	public void setWithEnum(Character withEnum) {
		this.withEnum = withEnum;
	}

	public Character getWithEnum() {
		return withEnum;
	}

	public void setWithListOfList(AllFieldCases withListOfList) {
		this.withListOfList = withListOfList;
	}

	public AllFieldCases getWithListOfList() {
		return withListOfList;
	}

	/**
	 * ###############################################################################
	 *  withList return a list of Characters, matching the given list of CharacterInput.
	 *  The name of the first Character returned is replaced by the given firstName.
	 *  All ids are generated  
	 */
	public void setWithList(List<Character> withList) {
		this.withList = withList;
	}

	/**
	 * ###############################################################################
	 *  withList return a list of Characters, matching the given list of CharacterInput.
	 *  The name of the first Character returned is replaced by the given firstName.
	 *  All ids are generated  
	 */
	public List<Character> getWithList() {
		return withList;
	}

	/**
	 * ###############################################################################
	 *  Complementary tests with the AllFieldCases Object
	 */
	public void setAllFieldCases(AllFieldCases allFieldCases) {
		this.allFieldCases = allFieldCases;
	}

	/**
	 * ###############################################################################
	 *  Complementary tests with the AllFieldCases Object
	 */
	public AllFieldCases getAllFieldCases() {
		return allFieldCases;
	}

	/**
	 * ###############################################################################
	 *  Test for unions
	 */
	public void setUnionTest(List<AnyCharacter> unionTest) {
		this.unionTest = unionTest;
	}

	/**
	 * ###############################################################################
	 *  Test for unions
	 */
	public List<AnyCharacter> getUnionTest() {
		return unionTest;
	}

	/**
	 * ###############################################################################
	 *  error always returns an error!  (used to check the error management)
	 */
	public void setError(Character error) {
		this.error = error;
	}

	/**
	 * ###############################################################################
	 *  error always returns an error!  (used to check the error management)
	 */
	public Character getError() {
		return error;
	}

	/**
	 *  Check for GraphQL identifier that are java keywords
	 */
	public void setABreak(_break aBreak) {
		this.aBreak = aBreak;
	}

	/**
	 *  Check for GraphQL identifier that are java keywords
	 */
	public _break getABreak() {
		return aBreak;
	}

	/**
	 * ###############################################################################
	 *  queries to check directive behavior
	 *  Returns the value, and potentially the anotherValue of the @testDirective directive set on the directiveOnQuery query. 
	 *  List is null if the directive is not present.
	 */
	public void setDirectiveOnQuery(List<String> directiveOnQuery) {
		this.directiveOnQuery = directiveOnQuery;
	}

	/**
	 * ###############################################################################
	 *  queries to check directive behavior
	 *  Returns the value, and potentially the anotherValue of the @testDirective directive set on the directiveOnQuery query. 
	 *  List is null if the directive is not present.
	 */
	public List<String> getDirectiveOnQuery() {
		return directiveOnQuery;
	}

	/**
	 *  Returns the value, and potentially the anotherValue of the @testDirective directive set on the @directiveOnQuery. 
	 *  List is null if the directive is not present.
	 */
	public void setDirectiveOnField(Character directiveOnField) {
		this.directiveOnField = directiveOnField;
	}

	/**
	 *  Returns the value, and potentially the anotherValue of the @testDirective directive set on the @directiveOnQuery. 
	 *  List is null if the directive is not present.
	 */
	public Character getDirectiveOnField() {
		return directiveOnField;
	}

	/**
	 * ###############################################################################
	 *  queries to check the addRelayConnections capability
	 */
	public void setConnectionWithoutParameters(List<Character> connectionWithoutParameters) {
		this.connectionWithoutParameters = connectionWithoutParameters;
	}

	/**
	 * ###############################################################################
	 *  queries to check the addRelayConnections capability
	 */
	public List<Character> getConnectionWithoutParameters() {
		return connectionWithoutParameters;
	}

	public void setConnectionOnHuman(List<Human> connectionOnHuman) {
		this.connectionOnHuman = connectionOnHuman;
	}

	public List<Human> getConnectionOnHuman() {
		return connectionOnHuman;
	}

	/**
	 * ###############################################################################
	 *  queries created to test some issues
	 * issue53 is about custom scalars as parameter for a query/mutation/subscription, that was not properly serialized/deserialized
	 */
	public void setIssue53(Date issue53) {
		this.issue53 = issue53;
	}

	/**
	 * ###############################################################################
	 *  queries created to test some issues
	 * issue53 is about custom scalars as parameter for a query/mutation/subscription, that was not properly serialized/deserialized
	 */
	public Date getIssue53() {
		return issue53;
	}

	/**
	 * issue82 is about hard coded values as parameters. Other types are tests with other queries, but there was no method with a simple float parameter
	 */
	public void setIssue82Float(Double issue82Float) {
		this.issue82Float = issue82Float;
	}

	/**
	 * issue82 is about hard coded values as parameters. Other types are tests with other queries, but there was no method with a simple float parameter
	 */
	public Double getIssue82Float() {
		return issue82Float;
	}

	public void setIssue82ID(UUID issue82ID) {
		this.issue82ID = issue82ID;
	}

	public UUID getIssue82ID() {
		return issue82ID;
	}

	/**
	 * ###############################################################################
	 *  A particular test, based on the github schema: a query that returns the query object.
	 *  It introduces complexity in the code generation, that must be tested    
	 */
	public void setRelay(MyQueryType relay) {
		this.relay = relay;
	}

	/**
	 * ###############################################################################
	 *  A particular test, based on the github schema: a query that returns the query object.
	 *  It introduces complexity in the code generation, that must be tested    
	 */
	public MyQueryType getRelay() {
		return relay;
	}

    public String toString() {
        return "MyQueryType {"
				+ "withoutParameters: " + withoutParameters
				+ ", "
				+ "withOneOptionalParam: " + withOneOptionalParam
				+ ", "
				+ "withOneMandatoryParam: " + withOneMandatoryParam
				+ ", "
				+ "withOneMandatoryParamDefaultValue: " + withOneMandatoryParamDefaultValue
				+ ", "
				+ "withTwoMandatoryParamDefaultVal: " + withTwoMandatoryParamDefaultVal
				+ ", "
				+ "withEnum: " + withEnum
				+ ", "
				+ "withListOfList: " + withListOfList
				+ ", "
				+ "withList: " + withList
				+ ", "
				+ "allFieldCases: " + allFieldCases
				+ ", "
				+ "unionTest: " + unionTest
				+ ", "
				+ "error: " + error
				+ ", "
				+ "aBreak: " + aBreak
				+ ", "
				+ "directiveOnQuery: " + directiveOnQuery
				+ ", "
				+ "directiveOnField: " + directiveOnField
				+ ", "
				+ "connectionWithoutParameters: " + connectionWithoutParameters
				+ ", "
				+ "connectionOnHuman: " + connectionOnHuman
				+ ", "
				+ "issue53: " + issue53
				+ ", "
				+ "issue82Float: " + issue82Float
				+ ", "
				+ "issue82ID: " + issue82ID
				+ ", "
				+ "relay: " + relay
        		+ "}";
    }

    /**
	 * Enum of field names
	 */
	 public static enum Field implements GraphQLField {
		WithoutParameters("withoutParameters"),
		WithOneOptionalParam("withOneOptionalParam"),
		WithOneMandatoryParam("withOneMandatoryParam"),
		WithOneMandatoryParamDefaultValue("withOneMandatoryParamDefaultValue"),
		WithTwoMandatoryParamDefaultVal("withTwoMandatoryParamDefaultVal"),
		WithEnum("withEnum"),
		WithListOfList("withListOfList"),
		WithList("withList"),
		AllFieldCases("allFieldCases"),
		UnionTest("unionTest"),
		Error("error"),
		ABreak("aBreak"),
		DirectiveOnQuery("directiveOnQuery"),
		DirectiveOnField("directiveOnField"),
		ConnectionWithoutParameters("connectionWithoutParameters"),
		ConnectionOnHuman("connectionOnHuman"),
		Issue53("issue53"),
		Issue82Float("issue82Float"),
		Issue82ID("issue82ID"),
		Relay("relay");

		private String fieldName;

		Field(String fieldName) {
			this.fieldName = fieldName;
		}

		public String getFieldName() {
			return fieldName;
		}

		public Class<?> getGraphQLType() {
			return this.getClass().getDeclaringClass();
		}

	}

	public static Builder builder() {
			return new Builder();
		}



	/**
	 * Builder
	 */
	public static class Builder {
		private List<Character> withoutParameters;
		private Character withOneOptionalParam;
		private Character withOneMandatoryParam;
		private Integer withOneMandatoryParamDefaultValue;
		private Droid withTwoMandatoryParamDefaultVal;
		private Character withEnum;
		private AllFieldCases withListOfList;
		private List<Character> withList;
		private AllFieldCases allFieldCases;
		private List<AnyCharacter> unionTest;
		private Character error;
		private _break aBreak;
		private List<String> directiveOnQuery;
		private Character directiveOnField;
		private List<Character> connectionWithoutParameters;
		private List<Human> connectionOnHuman;
		private Date issue53;
		private Double issue82Float;
		private UUID issue82ID;
		private MyQueryType relay;


		public Builder withWithoutParameters(List<Character> withoutParameters) {
			this.withoutParameters = withoutParameters;
			return this;
		}
		public Builder withWithOneOptionalParam(Character withOneOptionalParam) {
			this.withOneOptionalParam = withOneOptionalParam;
			return this;
		}
		public Builder withWithOneMandatoryParam(Character withOneMandatoryParam) {
			this.withOneMandatoryParam = withOneMandatoryParam;
			return this;
		}
		public Builder withWithOneMandatoryParamDefaultValue(Integer withOneMandatoryParamDefaultValue) {
			this.withOneMandatoryParamDefaultValue = withOneMandatoryParamDefaultValue;
			return this;
		}
		public Builder withWithTwoMandatoryParamDefaultVal(Droid withTwoMandatoryParamDefaultVal) {
			this.withTwoMandatoryParamDefaultVal = withTwoMandatoryParamDefaultVal;
			return this;
		}
		public Builder withWithEnum(Character withEnum) {
			this.withEnum = withEnum;
			return this;
		}
		public Builder withWithListOfList(AllFieldCases withListOfList) {
			this.withListOfList = withListOfList;
			return this;
		}
		public Builder withWithList(List<Character> withList) {
			this.withList = withList;
			return this;
		}
		public Builder withAllFieldCases(AllFieldCases allFieldCases) {
			this.allFieldCases = allFieldCases;
			return this;
		}
		public Builder withUnionTest(List<AnyCharacter> unionTest) {
			this.unionTest = unionTest;
			return this;
		}
		public Builder withError(Character error) {
			this.error = error;
			return this;
		}
		public Builder withABreak(_break aBreak) {
			this.aBreak = aBreak;
			return this;
		}
		public Builder withDirectiveOnQuery(List<String> directiveOnQuery) {
			this.directiveOnQuery = directiveOnQuery;
			return this;
		}
		public Builder withDirectiveOnField(Character directiveOnField) {
			this.directiveOnField = directiveOnField;
			return this;
		}
		public Builder withConnectionWithoutParameters(List<Character> connectionWithoutParameters) {
			this.connectionWithoutParameters = connectionWithoutParameters;
			return this;
		}
		public Builder withConnectionOnHuman(List<Human> connectionOnHuman) {
			this.connectionOnHuman = connectionOnHuman;
			return this;
		}
		public Builder withIssue53(Date issue53) {
			this.issue53 = issue53;
			return this;
		}
		public Builder withIssue82Float(Double issue82Float) {
			this.issue82Float = issue82Float;
			return this;
		}
		public Builder withIssue82ID(UUID issue82ID) {
			this.issue82ID = issue82ID;
			return this;
		}
		public Builder withRelay(MyQueryType relay) {
			this.relay = relay;
			return this;
		}

		public MyQueryType build() {
			MyQueryType _object = new MyQueryType();
			_object.setWithoutParameters(withoutParameters);
			_object.setWithOneOptionalParam(withOneOptionalParam);
			_object.setWithOneMandatoryParam(withOneMandatoryParam);
			_object.setWithOneMandatoryParamDefaultValue(withOneMandatoryParamDefaultValue);
			_object.setWithTwoMandatoryParamDefaultVal(withTwoMandatoryParamDefaultVal);
			_object.setWithEnum(withEnum);
			_object.setWithListOfList(withListOfList);
			_object.setWithList(withList);
			_object.setAllFieldCases(allFieldCases);
			_object.setUnionTest(unionTest);
			_object.setError(error);
			_object.setABreak(aBreak);
			_object.setDirectiveOnQuery(directiveOnQuery);
			_object.setDirectiveOnField(directiveOnField);
			_object.setConnectionWithoutParameters(connectionWithoutParameters);
			_object.setConnectionOnHuman(connectionOnHuman);
			_object.setIssue53(issue53);
			_object.setIssue82Float(issue82Float);
			_object.setIssue82ID(issue82ID);
			_object.setRelay(relay);
			return _object;
		}
	}
}
