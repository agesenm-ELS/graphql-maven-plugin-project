/** Generated by the default template from graphql-java-generator */
package com.graphql_java_generator.domain.server.allGraphQLCases;

import java.util.Date;
import java.util.List;

import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLScalar;

/**
 *
 * @author generated by graphql-java-generator
 * @see <a href=
 *      "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLObjectType("TheSubscriptionType")
public class TheSubscriptionType {

	public TheSubscriptionType() {
		// No action
	}

	/**
	 * Will be notified for each Human added to this Episode
	 */
	@GraphQLNonScalar(fieldName = "subscribeNewHumanForEpisode", graphQLTypeSimpleName = "Human", javaClass = Human.class)
	Human subscribeNewHumanForEpisode;

	/**
	 * Issue 54
	 */
	@GraphQLScalar(fieldName = "subscribeToAList", graphQLTypeSimpleName = "Int", javaClass = Integer.class)
	List<Integer> subscribeToAList;

	/**
	 * issue53 is about custom scalars as parameter for a query/mutation/subscription, that was not properly
	 * serialized/deserialized
	 */
	@GraphQLScalar(fieldName = "issue53", graphQLTypeSimpleName = "Date", javaClass = Date.class)
	Date issue53;

	/**
	 * Some subscriptions to test all kind of input parameters (to check proper serialization and deserialization)
	 */
	@GraphQLNonScalar(fieldName = "allGraphQLCasesInput", graphQLTypeSimpleName = "AllFieldCases", javaClass = AllFieldCases.class)
	AllFieldCases allGraphQLCasesInput;

	@GraphQLNonScalar(fieldName = "allGraphQLCasesParam", graphQLTypeSimpleName = "AllFieldCases", javaClass = AllFieldCases.class)
	AllFieldCases allGraphQLCasesParam;

	/**
	 * A dummy subscription, that allows to test errors (and other strange behavior), and their return to the
	 * subscription's client
	 */
	@GraphQLScalar(fieldName = "subscriptionTest", graphQLTypeSimpleName = "String", javaClass = String.class)
	String subscriptionTest;

	/**
	 * Will be notified for each Human added to this Episode
	 */
	public void setSubscribeNewHumanForEpisode(Human subscribeNewHumanForEpisode) {
		this.subscribeNewHumanForEpisode = subscribeNewHumanForEpisode;
	}

	/**
	 * Will be notified for each Human added to this Episode
	 */
	public Human getSubscribeNewHumanForEpisode() {
		return subscribeNewHumanForEpisode;
	}

	/**
	 * Issue 54
	 */
	public void setSubscribeToAList(List<Integer> subscribeToAList) {
		this.subscribeToAList = subscribeToAList;
	}

	/**
	 * Issue 54
	 */
	public List<Integer> getSubscribeToAList() {
		return subscribeToAList;
	}

	/**
	 * issue53 is about custom scalars as parameter for a query/mutation/subscription, that was not properly
	 * serialized/deserialized
	 */
	public void setIssue53(Date issue53) {
		this.issue53 = issue53;
	}

	/**
	 * issue53 is about custom scalars as parameter for a query/mutation/subscription, that was not properly
	 * serialized/deserialized
	 */
	public Date getIssue53() {
		return issue53;
	}

	/**
	 * Some subscriptions to test all kind of input parameters (to check proper serialization and deserialization)
	 */
	public void setAllGraphQLCasesInput(AllFieldCases allGraphQLCasesInput) {
		this.allGraphQLCasesInput = allGraphQLCasesInput;
	}

	/**
	 * Some subscriptions to test all kind of input parameters (to check proper serialization and deserialization)
	 */
	public AllFieldCases getAllGraphQLCasesInput() {
		return allGraphQLCasesInput;
	}

	public void setAllGraphQLCasesParam(AllFieldCases allGraphQLCasesParam) {
		this.allGraphQLCasesParam = allGraphQLCasesParam;
	}

	public AllFieldCases getAllGraphQLCasesParam() {
		return allGraphQLCasesParam;
	}

	/**
	 * A dummy subscription, that allows to test errors (and other strange behavior), and their return to the
	 * subscription's client
	 */
	public void setSubscriptionTest(String subscriptionTest) {
		this.subscriptionTest = subscriptionTest;
	}

	/**
	 * A dummy subscription, that allows to test errors (and other strange behavior), and their return to the
	 * subscription's client
	 */
	public String getSubscriptionTest() {
		return subscriptionTest;
	}

	@Override
	public String toString() {
		return "TheSubscriptionType {" + "subscribeNewHumanForEpisode: " + subscribeNewHumanForEpisode + ", "
				+ "subscribeToAList: " + subscribeToAList + ", " + "issue53: " + issue53 + ", "
				+ "allGraphQLCasesInput: " + allGraphQLCasesInput + ", " + "allGraphQLCasesParam: "
				+ allGraphQLCasesParam + ", " + "subscriptionTest: " + subscriptionTest + "}";
	}

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * Builder
	 */
	public static class Builder {
		private Human subscribeNewHumanForEpisode;
		private List<Integer> subscribeToAList;
		private Date issue53;
		private AllFieldCases allGraphQLCasesInput;
		private AllFieldCases allGraphQLCasesParam;
		private String subscriptionTest;

		public Builder withSubscribeNewHumanForEpisode(Human subscribeNewHumanForEpisode) {
			this.subscribeNewHumanForEpisode = subscribeNewHumanForEpisode;
			return this;
		}

		public Builder withSubscribeToAList(List<Integer> subscribeToAList) {
			this.subscribeToAList = subscribeToAList;
			return this;
		}

		public Builder withIssue53(Date issue53) {
			this.issue53 = issue53;
			return this;
		}

		public Builder withAllGraphQLCasesInput(AllFieldCases allGraphQLCasesInput) {
			this.allGraphQLCasesInput = allGraphQLCasesInput;
			return this;
		}

		public Builder withAllGraphQLCasesParam(AllFieldCases allGraphQLCasesParam) {
			this.allGraphQLCasesParam = allGraphQLCasesParam;
			return this;
		}

		public Builder withSubscriptionTest(String subscriptionTest) {
			this.subscriptionTest = subscriptionTest;
			return this;
		}

		public TheSubscriptionType build() {
			TheSubscriptionType _object = new TheSubscriptionType();
			_object.setSubscribeNewHumanForEpisode(subscribeNewHumanForEpisode);
			_object.setSubscribeToAList(subscribeToAList);
			_object.setIssue53(issue53);
			_object.setAllGraphQLCasesInput(allGraphQLCasesInput);
			_object.setAllGraphQLCasesParam(allGraphQLCasesParam);
			_object.setSubscriptionTest(subscriptionTest);
			return _object;
		}
	}
}
