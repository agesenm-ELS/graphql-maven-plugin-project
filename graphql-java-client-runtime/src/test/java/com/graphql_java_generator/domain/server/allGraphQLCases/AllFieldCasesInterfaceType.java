/** Generated by the default template from graphql-java-generator */
package com.graphql_java_generator.domain.server.allGraphQLCases;

import java.util.List;
import java.util.UUID;

import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLScalar;

/**
 * A concrete class that just implements the above interface
 *
 * @author generated by graphql-java-generator
 * @see <a href=
 *      "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLObjectType("AllFieldCasesInterfaceType")
public class AllFieldCasesInterfaceType implements AllFieldCasesInterface, WithID {

	public AllFieldCasesInterfaceType() {
		// No action
	}

	@GraphQLScalar(fieldName = "id", graphQLTypeSimpleName = "ID", javaClass = UUID.class)
	UUID id;

	@GraphQLScalar(fieldName = "name", graphQLTypeSimpleName = "String", javaClass = String.class)
	String name;

	@GraphQLScalar(fieldName = "forname", graphQLTypeSimpleName = "String", javaClass = String.class)
	String forname;

	@GraphQLScalar(fieldName = "age", graphQLTypeSimpleName = "Long", javaClass = Long.class)
	Long age;

	@GraphQLScalar(fieldName = "nbComments", graphQLTypeSimpleName = "Int", javaClass = Integer.class)
	Integer nbComments;

	@GraphQLScalar(fieldName = "comments", graphQLTypeSimpleName = "String", javaClass = String.class)
	List<String> comments;

	@GraphQLScalar(fieldName = "booleans", graphQLTypeSimpleName = "Boolean", javaClass = Boolean.class)
	List<Boolean> booleans;

	@GraphQLScalar(fieldName = "aliases", graphQLTypeSimpleName = "String", javaClass = String.class)
	List<String> aliases;

	@GraphQLScalar(fieldName = "planets", graphQLTypeSimpleName = "String", javaClass = String.class)
	List<String> planets;

	/**
	 * @RelayConnection should be but is not applied on the friends field (this allows the unit test that checks that a
	 *                  warning is correctly generated)
	 */
	@GraphQLNonScalar(fieldName = "friends", graphQLTypeSimpleName = "HumanConnection", javaClass = HumanConnection.class)
	HumanConnection friends;

	@GraphQLNonScalar(fieldName = "oneWithIdSubType", graphQLTypeSimpleName = "AllFieldCasesWithIdSubtype", javaClass = AllFieldCasesWithIdSubtype.class)
	AllFieldCasesWithIdSubtype oneWithIdSubType;

	@GraphQLNonScalar(fieldName = "listWithIdSubTypes", graphQLTypeSimpleName = "AllFieldCasesWithIdSubtype", javaClass = AllFieldCasesWithIdSubtype.class)
	List<AllFieldCasesWithIdSubtype> listWithIdSubTypes;

	@GraphQLNonScalar(fieldName = "oneWithoutIdSubType", graphQLTypeSimpleName = "AllFieldCasesWithoutIdSubtype", javaClass = AllFieldCasesWithoutIdSubtype.class)
	AllFieldCasesWithoutIdSubtype oneWithoutIdSubType;

	@GraphQLNonScalar(fieldName = "listWithoutIdSubTypes", graphQLTypeSimpleName = "AllFieldCasesWithoutIdSubtype", javaClass = AllFieldCasesWithoutIdSubtype.class)
	List<AllFieldCasesWithoutIdSubtype> listWithoutIdSubTypes;

	@Override
	public void setId(UUID id) {
		this.id = id;
	}

	@Override
	public UUID getId() {
		return id;
	}

	@Override
	public void setName(String name) {
		this.name = name;
	}

	@Override
	public String getName() {
		return name;
	}

	@Override
	public void setForname(String forname) {
		this.forname = forname;
	}

	@Override
	public String getForname() {
		return forname;
	}

	@Override
	public void setAge(Long age) {
		this.age = age;
	}

	@Override
	public Long getAge() {
		return age;
	}

	@Override
	public void setNbComments(Integer nbComments) {
		this.nbComments = nbComments;
	}

	@Override
	public Integer getNbComments() {
		return nbComments;
	}

	@Override
	public void setComments(List<String> comments) {
		this.comments = comments;
	}

	@Override
	public List<String> getComments() {
		return comments;
	}

	@Override
	public void setBooleans(List<Boolean> booleans) {
		this.booleans = booleans;
	}

	@Override
	public List<Boolean> getBooleans() {
		return booleans;
	}

	@Override
	public void setAliases(List<String> aliases) {
		this.aliases = aliases;
	}

	@Override
	public List<String> getAliases() {
		return aliases;
	}

	@Override
	public void setPlanets(List<String> planets) {
		this.planets = planets;
	}

	@Override
	public List<String> getPlanets() {
		return planets;
	}

	/**
	 * @RelayConnection should be but is not applied on the friends field (this allows the unit test that checks that a
	 *                  warning is correctly generated)
	 */
	@Override
	public void setFriends(HumanConnection friends) {
		this.friends = friends;
	}

	/**
	 * @RelayConnection should be but is not applied on the friends field (this allows the unit test that checks that a
	 *                  warning is correctly generated)
	 */
	@Override
	public HumanConnection getFriends() {
		return friends;
	}

	@Override
	public void setOneWithIdSubType(AllFieldCasesWithIdSubtype oneWithIdSubType) {
		this.oneWithIdSubType = oneWithIdSubType;
	}

	@Override
	public AllFieldCasesWithIdSubtype getOneWithIdSubType() {
		return oneWithIdSubType;
	}

	@Override
	public void setListWithIdSubTypes(List<AllFieldCasesWithIdSubtype> listWithIdSubTypes) {
		this.listWithIdSubTypes = listWithIdSubTypes;
	}

	@Override
	public List<AllFieldCasesWithIdSubtype> getListWithIdSubTypes() {
		return listWithIdSubTypes;
	}

	@Override
	public void setOneWithoutIdSubType(AllFieldCasesWithoutIdSubtype oneWithoutIdSubType) {
		this.oneWithoutIdSubType = oneWithoutIdSubType;
	}

	@Override
	public AllFieldCasesWithoutIdSubtype getOneWithoutIdSubType() {
		return oneWithoutIdSubType;
	}

	@Override
	public void setListWithoutIdSubTypes(List<AllFieldCasesWithoutIdSubtype> listWithoutIdSubTypes) {
		this.listWithoutIdSubTypes = listWithoutIdSubTypes;
	}

	@Override
	public List<AllFieldCasesWithoutIdSubtype> getListWithoutIdSubTypes() {
		return listWithoutIdSubTypes;
	}

	@Override
	public String toString() {
		return "AllFieldCasesInterfaceType {" + "id: " + id + ", " + "name: " + name + ", " + "forname: " + forname
				+ ", " + "age: " + age + ", " + "nbComments: " + nbComments + ", " + "comments: " + comments + ", "
				+ "booleans: " + booleans + ", " + "aliases: " + aliases + ", " + "planets: " + planets + ", "
				+ "friends: " + friends + ", " + "oneWithIdSubType: " + oneWithIdSubType + ", " + "listWithIdSubTypes: "
				+ listWithIdSubTypes + ", " + "oneWithoutIdSubType: " + oneWithoutIdSubType + ", "
				+ "listWithoutIdSubTypes: " + listWithoutIdSubTypes + "}";
	}

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * Builder
	 */
	public static class Builder {
		private UUID id;
		private String name;
		private String forname;
		private Long age;
		private Integer nbComments;
		private List<String> comments;
		private List<Boolean> booleans;
		private List<String> aliases;
		private List<String> planets;
		private HumanConnection friends;
		private AllFieldCasesWithIdSubtype oneWithIdSubType;
		private List<AllFieldCasesWithIdSubtype> listWithIdSubTypes;
		private AllFieldCasesWithoutIdSubtype oneWithoutIdSubType;
		private List<AllFieldCasesWithoutIdSubtype> listWithoutIdSubTypes;

		public Builder withId(UUID id) {
			this.id = id;
			return this;
		}

		public Builder withName(String name) {
			this.name = name;
			return this;
		}

		public Builder withForname(String forname) {
			this.forname = forname;
			return this;
		}

		public Builder withAge(Long age) {
			this.age = age;
			return this;
		}

		public Builder withNbComments(Integer nbComments) {
			this.nbComments = nbComments;
			return this;
		}

		public Builder withComments(List<String> comments) {
			this.comments = comments;
			return this;
		}

		public Builder withBooleans(List<Boolean> booleans) {
			this.booleans = booleans;
			return this;
		}

		public Builder withAliases(List<String> aliases) {
			this.aliases = aliases;
			return this;
		}

		public Builder withPlanets(List<String> planets) {
			this.planets = planets;
			return this;
		}

		public Builder withFriends(HumanConnection friends) {
			this.friends = friends;
			return this;
		}

		public Builder withOneWithIdSubType(AllFieldCasesWithIdSubtype oneWithIdSubType) {
			this.oneWithIdSubType = oneWithIdSubType;
			return this;
		}

		public Builder withListWithIdSubTypes(List<AllFieldCasesWithIdSubtype> listWithIdSubTypes) {
			this.listWithIdSubTypes = listWithIdSubTypes;
			return this;
		}

		public Builder withOneWithoutIdSubType(AllFieldCasesWithoutIdSubtype oneWithoutIdSubType) {
			this.oneWithoutIdSubType = oneWithoutIdSubType;
			return this;
		}

		public Builder withListWithoutIdSubTypes(List<AllFieldCasesWithoutIdSubtype> listWithoutIdSubTypes) {
			this.listWithoutIdSubTypes = listWithoutIdSubTypes;
			return this;
		}

		public AllFieldCasesInterfaceType build() {
			AllFieldCasesInterfaceType _object = new AllFieldCasesInterfaceType();
			_object.setId(id);
			_object.setName(name);
			_object.setForname(forname);
			_object.setAge(age);
			_object.setNbComments(nbComments);
			_object.setComments(comments);
			_object.setBooleans(booleans);
			_object.setAliases(aliases);
			_object.setPlanets(planets);
			_object.setFriends(friends);
			_object.setOneWithIdSubType(oneWithIdSubType);
			_object.setListWithIdSubTypes(listWithIdSubTypes);
			_object.setOneWithoutIdSubType(oneWithoutIdSubType);
			_object.setListWithoutIdSubTypes(listWithoutIdSubTypes);
			return _object;
		}
	}
}
