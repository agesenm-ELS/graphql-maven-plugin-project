/** Generated by the default template from graphql-java-generator */
package com.graphql_java_generator.domain.server.allGraphQLCases;

import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLScalar;

/**
 *
 * @author generated by graphql-java-generator
 * @see <a href=
 *      "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLObjectType("AnotherMutationType")
public class AnotherMutationType {

	public AnotherMutationType() {
		// No action
	}

	@GraphQLNonScalar(fieldName = "createHuman", graphQLTypeSimpleName = "Human", javaClass = Human.class)
	Human createHuman;

	@GraphQLNonScalar(fieldName = "createAllFieldCases", graphQLTypeSimpleName = "AllFieldCases", javaClass = AllFieldCases.class)
	AllFieldCases createAllFieldCases;

	/**
	 * Tests for issue 51
	 */
	@GraphQLScalar(fieldName = "deleteSnacks", graphQLTypeSimpleName = "Boolean", javaClass = Boolean.class)
	Boolean deleteSnacks;

	public void setCreateHuman(Human createHuman) {
		this.createHuman = createHuman;
	}

	public Human getCreateHuman() {
		return createHuman;
	}

	public void setCreateAllFieldCases(AllFieldCases createAllFieldCases) {
		this.createAllFieldCases = createAllFieldCases;
	}

	public AllFieldCases getCreateAllFieldCases() {
		return createAllFieldCases;
	}

	/**
	 * Tests for issue 51
	 */
	public void setDeleteSnacks(Boolean deleteSnacks) {
		this.deleteSnacks = deleteSnacks;
	}

	/**
	 * Tests for issue 51
	 */
	public Boolean getDeleteSnacks() {
		return deleteSnacks;
	}

	@Override
	public String toString() {
		return "AnotherMutationType {" + "createHuman: " + createHuman + ", " + "createAllFieldCases: "
				+ createAllFieldCases + ", " + "deleteSnacks: " + deleteSnacks + "}";
	}

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * Builder
	 */
	public static class Builder {
		private Human createHuman;
		private AllFieldCases createAllFieldCases;
		private Boolean deleteSnacks;

		public Builder withCreateHuman(Human createHuman) {
			this.createHuman = createHuman;
			return this;
		}

		public Builder withCreateAllFieldCases(AllFieldCases createAllFieldCases) {
			this.createAllFieldCases = createAllFieldCases;
			return this;
		}

		public Builder withDeleteSnacks(Boolean deleteSnacks) {
			this.deleteSnacks = deleteSnacks;
			return this;
		}

		public AnotherMutationType build() {
			AnotherMutationType _object = new AnotherMutationType();
			_object.setCreateHuman(createHuman);
			_object.setCreateAllFieldCases(createAllFieldCases);
			_object.setDeleteSnacks(deleteSnacks);
			return _object;
		}
	}
}
