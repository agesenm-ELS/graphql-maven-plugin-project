/** Generated by the default template from graphql-java-generator */
package com.graphql_java_generator.domain.client.allGraphQLCases;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.graphql_java_generator.annotation.GraphQLInputParameters;
import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLScalar;
import com.graphql_java_generator.client.GraphQLObjectMapper;
import com.graphql_java_generator.exception.GraphQLRequestExecutionException;

/**
 * A concrete class that just implements the above interface
 *
 * @author generated by graphql-java-generator
 * @see <a href=
 *      "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLObjectType("AllFieldCasesInterfaceType")
public class AllFieldCasesInterfaceType implements AllFieldCasesInterface, WithID {

	/**
	 * This map contains the deserialiazed values for the alias, as parsed from the json response from the GraphQL
	 * server. The key is the alias name, the value is the deserialiazed value (taking into account custom scalars,
	 * lists, ...)
	 */
	@com.graphql_java_generator.annotation.GraphQLIgnore
	Map<String, Object> aliasValues = new HashMap<>();

	public AllFieldCasesInterfaceType() {
		// No action
	}

	@JsonProperty("id")
	@GraphQLScalar(fieldName = "id", graphQLTypeSimpleName = "ID", javaClass = String.class)
	String id;

	@JsonProperty("name")
	@GraphQLScalar(fieldName = "name", graphQLTypeSimpleName = "String", javaClass = String.class)
	String name;

	@JsonProperty("forname")
	@GraphQLInputParameters(names = { "uppercase", "textToAppendToTheForname" }, types = { "Boolean",
			"String" }, mandatories = { false, false }, listDepths = { 0, 0 }, itemsMandatory = { false, false })
	@GraphQLScalar(fieldName = "forname", graphQLTypeSimpleName = "String", javaClass = String.class)
	String forname;

	@JsonProperty("age")
	@JsonDeserialize(using = CustomJacksonDeserializers.Long.class)
	@GraphQLScalar(fieldName = "age", graphQLTypeSimpleName = "Long", javaClass = Long.class)
	Long age;

	@JsonProperty("nbComments")
	@GraphQLScalar(fieldName = "nbComments", graphQLTypeSimpleName = "Int", javaClass = Integer.class)
	Integer nbComments;

	@JsonProperty("comments")
	@JsonDeserialize(using = CustomJacksonDeserializers.ListString.class)
	@GraphQLScalar(fieldName = "comments", graphQLTypeSimpleName = "String", javaClass = String.class)
	List<String> comments;

	@JsonProperty("booleans")
	@JsonDeserialize(using = CustomJacksonDeserializers.ListBoolean.class)
	@GraphQLScalar(fieldName = "booleans", graphQLTypeSimpleName = "Boolean", javaClass = Boolean.class)
	List<Boolean> booleans;

	@JsonProperty("aliases")
	@JsonDeserialize(using = CustomJacksonDeserializers.ListString.class)
	@GraphQLScalar(fieldName = "aliases", graphQLTypeSimpleName = "String", javaClass = String.class)
	List<String> aliases;

	@JsonProperty("planets")
	@JsonDeserialize(using = CustomJacksonDeserializers.ListString.class)
	@GraphQLScalar(fieldName = "planets", graphQLTypeSimpleName = "String", javaClass = String.class)
	List<String> planets;

	/**
	 * @RelayConnection should be but is not applied on the friends field (this allows the unit test that checks that a
	 *                  warning is correctly generated)
	 */
	@JsonProperty("friends")
	@JsonDeserialize(using = CustomJacksonDeserializers.ListHuman.class)
	@GraphQLNonScalar(fieldName = "friends", graphQLTypeSimpleName = "Human", javaClass = Human.class)
	List<Human> friends;

	@JsonProperty("oneWithIdSubType")
	@GraphQLNonScalar(fieldName = "oneWithIdSubType", graphQLTypeSimpleName = "AllFieldCasesWithIdSubtype", javaClass = AllFieldCasesWithIdSubtype.class)
	AllFieldCasesWithIdSubtype oneWithIdSubType;

	@JsonProperty("listWithIdSubTypes")
	@JsonDeserialize(using = CustomJacksonDeserializers.ListAllFieldCasesWithIdSubtype.class)
	@GraphQLInputParameters(names = { "nbItems", "uppercaseName", "textToAppendToTheForname" }, types = { "Int",
			"Boolean", "String" }, mandatories = { true, false,
					false }, listDepths = { 0, 0, 0 }, itemsMandatory = { false, false, false })
	@GraphQLNonScalar(fieldName = "listWithIdSubTypes", graphQLTypeSimpleName = "AllFieldCasesWithIdSubtype", javaClass = AllFieldCasesWithIdSubtype.class)
	List<AllFieldCasesWithIdSubtype> listWithIdSubTypes;

	@JsonProperty("oneWithoutIdSubType")
	@GraphQLInputParameters(names = { "input" }, types = { "FieldParameterInput" }, mandatories = {
			false }, listDepths = { 0 }, itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "oneWithoutIdSubType", graphQLTypeSimpleName = "AllFieldCasesWithoutIdSubtype", javaClass = AllFieldCasesWithoutIdSubtype.class)
	AllFieldCasesWithoutIdSubtype oneWithoutIdSubType;

	@JsonProperty("listWithoutIdSubTypes")
	@JsonDeserialize(using = CustomJacksonDeserializers.ListAllFieldCasesWithoutIdSubtype.class)
	@GraphQLInputParameters(names = { "nbItems", "input", "textToAppendToTheForname" }, types = { "Int",
			"FieldParameterInput", "String" }, mandatories = { true, false,
					false }, listDepths = { 0, 0, 0 }, itemsMandatory = { false, false, false })
	@GraphQLNonScalar(fieldName = "listWithoutIdSubTypes", graphQLTypeSimpleName = "AllFieldCasesWithoutIdSubtype", javaClass = AllFieldCasesWithoutIdSubtype.class)
	List<AllFieldCasesWithoutIdSubtype> listWithoutIdSubTypes;

	@JsonProperty("__typename")
	@GraphQLScalar(fieldName = "__typename", graphQLTypeSimpleName = "String", javaClass = String.class)
	String __typename;

	@Override
	public void setId(String id) {
		this.id = id;
	}

	@Override
	public String getId() {
		return id;
	}

	@Override
	public void setName(String name) {
		this.name = name;
	}

	@Override
	public String getName() {
		return name;
	}

	@Override
	public void setForname(String forname) {
		this.forname = forname;
	}

	@Override
	public String getForname() {
		return forname;
	}

	@Override
	public void setAge(Long age) {
		this.age = age;
	}

	@Override
	public Long getAge() {
		return age;
	}

	@Override
	public void setNbComments(Integer nbComments) {
		this.nbComments = nbComments;
	}

	@Override
	public Integer getNbComments() {
		return nbComments;
	}

	@Override
	public void setComments(List<String> comments) {
		this.comments = comments;
	}

	@Override
	public List<String> getComments() {
		return comments;
	}

	@Override
	public void setBooleans(List<Boolean> booleans) {
		this.booleans = booleans;
	}

	@Override
	public List<Boolean> getBooleans() {
		return booleans;
	}

	@Override
	public void setAliases(List<String> aliases) {
		this.aliases = aliases;
	}

	@Override
	public List<String> getAliases() {
		return aliases;
	}

	@Override
	public void setPlanets(List<String> planets) {
		this.planets = planets;
	}

	@Override
	public List<String> getPlanets() {
		return planets;
	}

	/**
	 * @RelayConnection should be but is not applied on the friends field (this allows the unit test that checks that a
	 *                  warning is correctly generated)
	 */
	@Override
	public void setFriends(List<Human> friends) {
		this.friends = friends;
	}

	/**
	 * @RelayConnection should be but is not applied on the friends field (this allows the unit test that checks that a
	 *                  warning is correctly generated)
	 */
	@Override
	public List<Human> getFriends() {
		return friends;
	}

	@Override
	public void setOneWithIdSubType(AllFieldCasesWithIdSubtype oneWithIdSubType) {
		this.oneWithIdSubType = oneWithIdSubType;
	}

	@Override
	public AllFieldCasesWithIdSubtype getOneWithIdSubType() {
		return oneWithIdSubType;
	}

	@Override
	public void setListWithIdSubTypes(List<AllFieldCasesWithIdSubtype> listWithIdSubTypes) {
		this.listWithIdSubTypes = listWithIdSubTypes;
	}

	@Override
	public List<AllFieldCasesWithIdSubtype> getListWithIdSubTypes() {
		return listWithIdSubTypes;
	}

	@Override
	public void setOneWithoutIdSubType(AllFieldCasesWithoutIdSubtype oneWithoutIdSubType) {
		this.oneWithoutIdSubType = oneWithoutIdSubType;
	}

	@Override
	public AllFieldCasesWithoutIdSubtype getOneWithoutIdSubType() {
		return oneWithoutIdSubType;
	}

	@Override
	public void setListWithoutIdSubTypes(List<AllFieldCasesWithoutIdSubtype> listWithoutIdSubTypes) {
		this.listWithoutIdSubTypes = listWithoutIdSubTypes;
	}

	@Override
	public List<AllFieldCasesWithoutIdSubtype> getListWithoutIdSubTypes() {
		return listWithoutIdSubTypes;
	}

	@Override
	public void set__typename(String __typename) {
		this.__typename = __typename;
	}

	@Override
	public String get__typename() {
		return __typename;
	}

	/**
	 * This method is called during the json deserialization process, by the {@link GraphQLObjectMapper}, each time an
	 * alias value is read from the json.
	 * 
	 * @param aliasName
	 * @param aliasDeserializedValue
	 */
	@Override
	public void setAliasValue(String aliasName, Object aliasDeserializedValue) {
		aliasValues.put(aliasName, aliasDeserializedValue);
	}

	/**
	 * Retrieves the value for the given alias, as it has been received for this object in the GraphQL response. <BR/>
	 * This method <B>should not be used for Custom Scalars</B>, as the parser doesn't know if this alias is a custom
	 * scalar, and which custom scalar to use at deserialization time. In most case, a value will then be provided by
	 * this method with a basis json deserialization, but this value won't be the proper custom scalar value.
	 * 
	 * @param alias
	 * @return
	 * @throws GraphQLRequestExecutionException
	 *             If the value can not be parsed
	 */
	@Override
	public Object getAliasValue(String alias) throws GraphQLRequestExecutionException {
		Object value = aliasValues.get(alias);
		if (value instanceof GraphQLRequestExecutionException)
			throw (GraphQLRequestExecutionException) value;
		else
			return value;
	}

	@Override
	public String toString() {
		return "AllFieldCasesInterfaceType {" + "id: " + id + ", " + "name: " + name + ", " + "forname: " + forname
				+ ", " + "age: " + age + ", " + "nbComments: " + nbComments + ", " + "comments: " + comments + ", "
				+ "booleans: " + booleans + ", " + "aliases: " + aliases + ", " + "planets: " + planets + ", "
				+ "friends: " + friends + ", " + "oneWithIdSubType: " + oneWithIdSubType + ", " + "listWithIdSubTypes: "
				+ listWithIdSubTypes + ", " + "oneWithoutIdSubType: " + oneWithoutIdSubType + ", "
				+ "listWithoutIdSubTypes: " + listWithoutIdSubTypes + ", " + "__typename: " + __typename + "}";
	}

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * Builder
	 */
	public static class Builder {
		private String id;
		private String name;
		private String forname;
		private Long age;
		private Integer nbComments;
		private List<String> comments;
		private List<Boolean> booleans;
		private List<String> aliases;
		private List<String> planets;
		private List<Human> friends;
		private AllFieldCasesWithIdSubtype oneWithIdSubType;
		private List<AllFieldCasesWithIdSubtype> listWithIdSubTypes;
		private AllFieldCasesWithoutIdSubtype oneWithoutIdSubType;
		private List<AllFieldCasesWithoutIdSubtype> listWithoutIdSubTypes;

		public Builder withId(String id) {
			this.id = id;
			return this;
		}

		public Builder withName(String name) {
			this.name = name;
			return this;
		}

		public Builder withForname(String forname) {
			this.forname = forname;
			return this;
		}

		public Builder withAge(Long age) {
			this.age = age;
			return this;
		}

		public Builder withNbComments(Integer nbComments) {
			this.nbComments = nbComments;
			return this;
		}

		public Builder withComments(List<String> comments) {
			this.comments = comments;
			return this;
		}

		public Builder withBooleans(List<Boolean> booleans) {
			this.booleans = booleans;
			return this;
		}

		public Builder withAliases(List<String> aliases) {
			this.aliases = aliases;
			return this;
		}

		public Builder withPlanets(List<String> planets) {
			this.planets = planets;
			return this;
		}

		public Builder withFriends(List<Human> friends) {
			this.friends = friends;
			return this;
		}

		public Builder withOneWithIdSubType(AllFieldCasesWithIdSubtype oneWithIdSubType) {
			this.oneWithIdSubType = oneWithIdSubType;
			return this;
		}

		public Builder withListWithIdSubTypes(List<AllFieldCasesWithIdSubtype> listWithIdSubTypes) {
			this.listWithIdSubTypes = listWithIdSubTypes;
			return this;
		}

		public Builder withOneWithoutIdSubType(AllFieldCasesWithoutIdSubtype oneWithoutIdSubType) {
			this.oneWithoutIdSubType = oneWithoutIdSubType;
			return this;
		}

		public Builder withListWithoutIdSubTypes(List<AllFieldCasesWithoutIdSubtype> listWithoutIdSubTypes) {
			this.listWithoutIdSubTypes = listWithoutIdSubTypes;
			return this;
		}

		public AllFieldCasesInterfaceType build() {
			AllFieldCasesInterfaceType _object = new AllFieldCasesInterfaceType();
			_object.setId(id);
			_object.setName(name);
			_object.setForname(forname);
			_object.setAge(age);
			_object.setNbComments(nbComments);
			_object.setComments(comments);
			_object.setBooleans(booleans);
			_object.setAliases(aliases);
			_object.setPlanets(planets);
			_object.setFriends(friends);
			_object.setOneWithIdSubType(oneWithIdSubType);
			_object.setListWithIdSubTypes(listWithIdSubTypes);
			_object.setOneWithoutIdSubType(oneWithoutIdSubType);
			_object.setListWithoutIdSubTypes(listWithoutIdSubTypes);
			_object.set__typename("AllFieldCasesInterfaceType");
			return _object;
		}
	}
}
